@using Microsoft.VisualBasic
@using PESOapps.Shared.Services
@using System.Text.Json
@using System.Net.Http.Headers
@using webapi_peso.ViewModels
@inject AuthService AuthService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject UiStateService UiState

@if (!isUserLoggedIn)
{

}
else if (profile == null)
{
    <p>Loading...</p>
}
else
{
    <div class="navbars dash">
        <div class="navbar-container">
            <div class="navbar-logo">
                <div class="log-diver">
                    <img src="_content/PESOapps.Shared/images/peso.png" />
                    <div class="log-inside-conts">
                        <div class="log-inside">
                            <h5>P</h5><h5 class="ext">ublic</h5>
                            <h5>E</h5><h5 class="ext">mployment</h5>
                            <h5>S</h5><h5 class="ext">ervice</h5>
                            <h5>O</h5><h5 class="ext">ffice</h5>
                        </div>
                        <div class="log-inside">
                            <span>Misamis Oriental</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="navbar-option has-submenu log-outs">
                <div class="nav-item has-submenu">
                    <NavLink class="dashnav" href="Profile/municipality">
                        <img src="_content/PESOapps.Shared/images/profile_placeholder.png" alt="profile" class="img-thumbnail" style="border-radius:100%;height:30px;width:34px">
                    </NavLink>
                    <div class="nav-sub">
                        <div class="nav-item" @onclick="AuthService.Logout">
                            Logout <i class="fa-solid fa-arrow-right-from-bracket"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="sidebar-container">
        <div class="btn-toggle light-mode" @onclick="UiState.ToggleSidebar">
            <div class="btn__indicator">
                <div class="btn__icon">
                    <i id="navicon" class="fa-solid fa-chevron-circle-left"></i>
                </div>
            </div>
        </div>

        <NavLink class="sidebar-logo" href="Profile/municipality">
            <img src="_content/PESOapps.Shared/svg/user-solid.svg" class="dash-icon"  />
            <p>
                @{
                    var displayName = profile?.UserAccount?.GivenName;
                    if (string.IsNullOrWhiteSpace(displayName))
                    {
                        displayName = GetFirstTwoWords(profile?.UserAccount?.Name);
                        if (string.IsNullOrWhiteSpace(displayName))
                        {
                            displayName = "Profile";
                        }
                    }
                }
                @displayName
            </p>
        </NavLink>
        <div class="sidebar-nav">
            <NavLink class="dashnav-links" href="Jobfair/municipality">
                <img src="_content/PESOapps.Shared/svg/briefcase-solid.svg" class="dash-icon" />
                <span>Job Fair</span>
            </NavLink>
        </div>
    </div>
}
@code {
    private bool isUserLoggedIn = false;
    private AccountAndInformationViewModel? profile;
    private bool loaded = false;
    private string initialBearerToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE4Mjc5ODUzMjMsImlzcyI6InBtaXMiLCJhdWQiOiJtaXNhbWlzIG9yaWVudGFsIn0.TNAG-ODpEb_gfDf_sRfvK5wFvloBU_pcd9WKY6ajQfk";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            try
            {
                var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
                var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

                if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true" && !string.IsNullOrWhiteSpace(token))
                {
                    isUserLoggedIn = true;

                    // Add token to the request headers
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", initialBearerToken);

                    var response = await Http.GetAsync($"api/Applicant/GetApplicantProfile/{userId}");
                    if (response.IsSuccessStatusCode)
                    {
                        var json = await response.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(json,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        StateHasChanged(); // Update UI
                    }
                    else
                    {
                        Console.WriteLine($"Failed to load profile: {response.StatusCode}");
                        await AuthService.Logout();
                    }
                }
                else
                {
                    Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }


    private string GetFirstTwoWords(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return string.Empty;

        var words = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (words.Length == 0)
            return string.Empty;
        if (words.Length == 1)
            return words[0];
        return $"{words[0]} {words[1]}";
    }

}
