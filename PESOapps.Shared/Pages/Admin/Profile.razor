@page "/Profile/admin"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using webapi_peso.ViewModels
@using System.Text.Json
@using PESOapps.Shared.Pages.Shared

<h3>Admin Profile - Job Fair Status</h3>

@if (isLoading)
{
    <Loading IsLoading="@isLoading" Message="Loading..." />
}
else if (!isUserLoggedIn)
{
    <p>Redirecting to login...</p>
}
else
{
    <div class="status-container">
        <label class="switch">
            <input type="checkbox" @bind="IsJobFairActive" />
            <span class="slider"></span>
        </label>
        <span class="status-text">@statusText</span>
    </div>
}

@code {
    private bool isUserLoggedIn;
    private bool isLoading = true;
    private string statusText = "";
    private string? userId;

    private bool _isJobFairActive;
    private bool IsJobFairActive
    {
        get => _isJobFairActive;
        set
        {
            if (_isJobFairActive != value)
            {
                _isJobFairActive = value;
                _ = ToggleStatusAsync(); // automatically call when toggled
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeProfileAsync();
    }

    private async Task InitializeProfileAsync()
    {
        try
        {
            userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (string.IsNullOrWhiteSpace(userId) || isLoggedIn != "true" || string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
                return;
            }

            isUserLoggedIn = true;
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            await LoadJobFairStatus();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadJobFairStatus()
    {
        try
        {
            var response = await Http.GetAsync("api/Manager/GetJobFairStatus");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                IsJobFairActive = result.Trim() == "1";
                UpdateStatusText();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to load Job Fair Status.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading status: {ex.Message}");
        }
    }

    private async Task ToggleStatusAsync()
    {
        UpdateStatusText();

        if (string.IsNullOrEmpty(userId))
            return;

        try
        {
            var content = new StringContent(
                JsonSerializer.Serialize(new { UserId = userId }),
                System.Text.Encoding.UTF8,
                "application/json"
            );

            var response = await Http.PostAsync("api/Manager/SetJobFairStatus", content);
            if (response.IsSuccessStatusCode)
                await JS.InvokeVoidAsync("alert", $"Job Fair Status updated to: {statusText}");
            else
                await JS.InvokeVoidAsync("alert", "Failed to update Job Fair Status.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error updating status: {ex.Message}");
        }
    }

    private void UpdateStatusText()
    {
        statusText = IsJobFairActive ? "Job Fair is ON" : "Job Fair is OFF";
    }
}
