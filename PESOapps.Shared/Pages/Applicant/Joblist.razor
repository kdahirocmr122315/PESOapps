@page "/Joblist/dash"
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@using webapi_peso.Model
@using webapi_peso.ViewModels

@if (!isUserLoggedIn)
{

}
else if (profile == null)
{
    <p>Loading...</p>
}
else
{
    <div class="job-board">
        @if (showApplyPopup)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <h4>Apply for @selectedJob?.JobPost?.Description</h4>

                    <input type="email"
                           class="nsrp-input"
                           placeholder="Enter your email"
                           @bind="applicationEmail" />

                    <textarea class="nsrp-input"
                              placeholder="Enter your message"
                              @bind="applicationMessage"></textarea>

                    <div class="modal-actions">
                        <button class="nsrp-toggle" @onclick="SubmitApplication">Submit</button>
                        <button class="nsrp-toggle" @onclick="() => showApplyPopup = false">Cancel</button>
                    </div>
                </div>
            </div>
        }


        <div class="job-list">
            <!-- 🔍 Search Bar -->
            <div class="filter-bars">
                <div class="search-bar">
                    <input type="text"
                           class="nsrp-input"
                           placeholder="Search jobs..."
                           @bind="searchTerm"
                           @bind:event="oninput" />
                </div>

                <select @bind="selectedFilter" class="nsrp-input">
                    <option value="All">All</option>
                    <option value="Available">Available</option>
                    <option value="Expired">Expired</option>
                </select>
            </div>

            @if (jobList == null)
            {
                <p>Loading jobs...</p>
            }
            else
            {
                var filteredJobs = jobList
                .Where(j =>
                // 🔍 Search filter
                string.IsNullOrEmpty(searchTerm) ||
                (j.JobPost?.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (j.EmpDetails?.EstablishmentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (j.EmpDetails?.Address?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                )
                .Where(j =>
                // ✅ Availability filter
                selectedFilter == "All" ||
                (selectedFilter == "Available" && (j.JobPost?.Expiry ?? DateTime.MinValue) >= DateTime.Now) ||
                (selectedFilter == "Expired" && (j.JobPost?.Expiry ?? DateTime.MaxValue) < DateTime.Now)
                )
                .ToList();

                if (filteredJobs.Count == 0)
                {
                    <p>No jobs found.</p>
                }
                else
                {
                    @foreach (var job in filteredJobs)
                    {
                        bool isExpired = job.JobPost?.Expiry < DateTime.Now;

                        <div class="job-card @(selectedJob?.JobPost?.Id == job.JobPost?.Id ? "selected" : "")"
                             @onclick="@(() => SelectJob(job))">
                            <div class="card-name elips">@job.JobPost?.Description</div>
                            <p>@GetEstablishmentName(job)</p>
                            <p class="muted">@job.EmpDetails?.Address</p>
                            <p class="card-date"><em>@job.JobPost?.DatePosted.ToString("MMMM dd, yyyy")</em></p>

                            @if (isExpired)
                            {
                                <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                            }
                        </div>
                    }
                }
            }
        </div>

        <div class="job-details">
            @if (selectedJob != null)
            {
                bool isExpired = selectedJob.JobPost?.Expiry < DateTime.Now;

                <div class="card-name">@selectedJob.JobPost?.Description</div>
                <p>@selectedJob?.EmpDetails?.EstablishmentName</p>
                <p class="muted">@selectedJob?.EmpDetails?.Address</p>
                <p class="card-date"><em>@selectedJob?.JobPost?.DatePosted.ToString("MMMM dd, yyyy")</em></p>

                @if (isExpired)
                {
                    <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                }
                else if (hasAlreadyApplied)
                {
                    <p class="muted" style="color:orange;"><strong>Already applied to this job.</strong></p>
                }
                else
                {
                    <button class="nsrp-toggle" @onclick="ShowApplyPopup">Apply This Job</button>
                }
                <p class="card-details-sal">
                    @if (selectedJob?.JobPost?.Salary != null)
                    {
                        @string.Format(new System.Globalization.CultureInfo("en-PH"), "{0:C}", selectedJob.JobPost.Salary)
                    }
                </p>

                <hr />
                <div class="details-inner">
                    <div class="details-divider">
                        <p class="card-description">
                            @if (selectedJob?.JobPost?.Description2 != null)
                            {
                                @selectedJob?.JobPost?.Description2
                            }
                            else
                            {
                                <span>--------------</span>
                            }
                        </p>
                    </div>

                    <div class="details-divider">
                        <p class="card-details">Other Details</p>
                        <p class="card-details-in">
                            @if (selectedJob?.JobPost?.EducationalAttainment != null)
                            {
                                <span class="card-span">Must be: </span>
                                @($"{selectedJob?.JobPost?.EducationalAttainment}")
                            }
                        </p>
                        <p class="card-details-in">
                            @if (selectedJob?.JobPost?.WorkExperience != null)
                            {
                                <span class="card-span">Work Experience: </span>
                                @($"{selectedJob?.JobPost?.WorkExperience}")
                            }
                        </p>
                        <p class="card-details-in">
                            @if (selectedJob?.JobPost?.NumberOfVacancy > 0)
                            {
                                <span class="card-span">Number of vacancies: </span>
                                @($"{selectedJob?.JobPost?.NumberOfVacancy}")
                            }
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Gender:</span>
                            @if (selectedJob?.JobPost?.Gender != null)
                            {
                                @($"{selectedJob?.JobPost?.Gender}")
                            }
                            else
                            {
                                <span>Any</span>
                            }
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Age:</span>
                            @if (selectedJob?.JobPost?.AgeFrom != 0 && selectedJob?.JobPost?.AgeTo != 0)
                            {
                                @($"{selectedJob?.JobPost?.AgeFrom} to {selectedJob?.JobPost?.AgeTo}")
                            }
                            else
                            {
                                <span>No required</span>
                            }
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private AccountAndInformationViewModel? profile;
    private bool isUserLoggedIn = false;
    private bool loaded = false;

    private List<JobPostViewModel>? jobList;
    private JobPostViewModel? selectedJob;

    private string searchTerm = string.Empty;
    private string selectedFilter = "All"; // Default: show all
    private string userId = string.Empty; // store userId globally

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId"); // <-- store here
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                try
                {
                    var response = await Http.GetAsync($"http://localhost:5167/api/Applicant/GetApplicantProfile/{userId}");

                    if (response.IsSuccessStatusCode)
                    {
                        var json = await response.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(json,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                        // Load job list after confirming user profile
                        jobList = await Http.GetFromJsonAsync<List<JobPostViewModel>>("http://localhost:5167/api/Applicant/GetJobLists");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }

                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }

    private bool hasAlreadyApplied = false;

    private async Task SelectJob(JobPostViewModel job)
    {
        selectedJob = job;
        hasAlreadyApplied = false;

        if (selectedJob?.JobPost?.Id != null && profile?.ApplicantInformation?.Id != null)
        {
            try
            {
                var userId = profile.ApplicantInformation.Id;
                var jobId = selectedJob.JobPost.Id;

                var response = await Http.GetAsync($"http://localhost:5167/api/Applicant/CheckIfAlreadyApplied/{userId}/{jobId}");

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStringAsync();
                    hasAlreadyApplied = bool.TryParse(result, out var applied) && applied;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking application: {ex.Message}");
            }
        }

        StateHasChanged();
    }



    public class JobPostViewModel
    {
        public EmployerDetails? EmpDetails { get; set; }
        public EmployerJobPost? JobPost { get; set; }
        public string? FirstImage { get; set; }
    }

    private string? GetEstablishmentName(JobPostViewModel job)
    {
        if (job.JobPost?.EmployerDetailsId != null && job.EmpDetails?.Id != null)
        {
            if (job.JobPost.EmployerDetailsId == job.EmpDetails.Id)
            {
                return job.EmpDetails.EstablishmentName;
            }
        }
        return "Unknown Establishment";
    }

    // *********************************************** APPLY JOB POP-UP  *********************************************** //

    private bool showApplyPopup = false;
    private string applicationEmail = string.Empty;
    private string applicationMessage = string.Empty;

    void ShowApplyPopup()
    {
        // Prefill email from profile if available
        applicationEmail = profile?.ApplicantInformation?.Email ?? string.Empty;
        applicationMessage = string.Empty;
        showApplyPopup = true;
    }

    private async Task SubmitApplication()
    {
        if (selectedJob?.JobPost?.Id == null || string.IsNullOrWhiteSpace(applicationEmail) || string.IsNullOrWhiteSpace(applicationMessage))
        {
            await JS.InvokeVoidAsync("alert", "Please enter your email and message.");
            return;
        }

        var payload = new
        {
            id = Guid.NewGuid().ToString(),
            email = applicationEmail,
            message = applicationMessage,
            jobPostId = selectedJob.JobPost.Id.ToString(),
            applicantId = userId,  // <-- use userId from Local Storage
            dateCreated = DateTime.UtcNow
        };

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5167/api/Applicant/SaveJobApplication", payload);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Application submitted successfully!");
                showApplyPopup = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to apply: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

}
