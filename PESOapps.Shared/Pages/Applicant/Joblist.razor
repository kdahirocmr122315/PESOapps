@page "/Joblist/dash"
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Headers
@using Tewr.Blazor.FileReader
@using webapi_peso.Model
@using webapi_peso.ViewModels
@using Microsoft.AspNetCore.Components.Forms

@if (!isUserLoggedIn)
{

}
else if (profile == null)
{
    <p>Loading...</p>
}
else
{
    <div class="job-board">
        @if (showApplyPopup)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <h4>Apply for @selectedJob?.JobPost?.Description</h4>

                    <input type="email"
                           class="nsrp-input"
                           placeholder="Enter your email"
                           @bind="applicationEmail" />

                    <textarea class="nsrp-input"
                              placeholder="Enter your message"
                              @bind="applicationMessage">
                    </textarea>

                    <!-- File Upload -->
                    <InputFile class="nsrp-input"
                               OnChange="OnFileSelected"
                               accept=".pdf,.doc,.docx" multiple />

                    <div class="modal-actions">
                        <button class="nsrp-toggle" @onclick="SubmitApplication" disabled="@isLoading">
                            @(isLoading ? "Submitting..." : "Submit")
                        </button>
                        <button class="nsrp-toggle" @onclick="() => showApplyPopup = false" disabled="@isLoading">Cancel</button>
                    </div>
                </div>
            </div>

        }
         
        <div class="job-list">
            <!-- 🔍 Search Bar -->
            <div class="filter-bars">
                <div class="search-bar">
                    <input type="text"
                           class="nsrp-input"
                           placeholder="Search jobs..."
                           @bind="searchTerm"
                           @bind:event="oninput" />
                </div>

                <select @bind="selectedFilter" class="nsrp-input">
                    <option value="All">All</option>
                    <option value="Available">Available</option>
                    <option value="Expired">Expired</option>
                </select>

                <button class="nsrp-input" @onclick="ToggleSort" style="width: fit-content;justify-self: end;">
                    @(sortLatestFirst ? "▼" : "▲")
                </button>
            </div>

            @if (jobList == null)
            {
                <p>Loading jobs...</p>
            }
            else
            {
                var filteredJobs = jobList
                .Where(j =>
                // 🔍 Search filter
                string.IsNullOrEmpty(searchTerm) ||
                (j.JobPost?.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (j.EmpDetails?.EstablishmentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (j.EmpDetails?.Address?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                )
                .Where(j =>
                // ✅ Availability filter
                selectedFilter == "All" ||
                (selectedFilter == "Available" && (j.JobPost?.Expiry ?? DateTime.MinValue) >= DateTime.Now) ||
                (selectedFilter == "Expired" && (j.JobPost?.Expiry ?? DateTime.MaxValue) < DateTime.Now)
                )
                .ToList();

                if (filteredJobs.Count == 0)
                {
                    <p>No jobs found.</p>
                }
                else
                {
                    @foreach (var job in filteredJobs)
                    {
                        bool isExpired = job.JobPost?.Expiry < DateTime.Now;

                        <div class="job-card @(selectedJob?.JobPost?.Id == job.JobPost?.Id ? "selected" : "")"
                             @onclick="@(() => SelectJob(job))">
                            <div class="card-name elips">@job.JobPost?.Description</div>
                            <p>@GetEstablishmentName(job)</p>
                            <p class="muted">@job.EmpDetails?.Address</p>
                            <p class="card-date"><em>@job.JobPost?.DatePosted.ToString("MMMM dd, yyyy")</em></p>

                            @if (isExpired)
                            {
                                <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                            }
                        </div>
                    }
                }
            }
        </div>

        <div class="job-details">
           @if (selectedJob != null)
            {
                bool isExpired = selectedJob.JobPost?.Expiry < DateTime.Now;

                <div class="card-name">@selectedJob.JobPost?.Description</div>
                <p>@selectedJob?.EmpDetails?.EstablishmentName</p>
                <p class="muted">@selectedJob?.EmpDetails?.Address</p>
                <p class="card-date"><em>@selectedJob?.JobPost?.DatePosted.ToString("MMMM dd, yyyy")</em></p>            
                <p class="card-details-sal">
                    @if (selectedJob?.JobPost?.Salary != null)
                    {
                        @string.Format(new System.Globalization.CultureInfo("en-PH"), "{0:C}", selectedJob.JobPost.Salary)
                    }
                </p>

                @if (isExpired)
                {
                    <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                }
                else if (hasAlreadyApplied) 
                {
                    <p class="muted" style="color:#07522D;font-size:1em;"><strong>Already applied to this job.</strong></p>
                }
                else
                {
                    <button class="nsrp-toggle" @onclick="ShowApplyPopup">Apply This Job</button>
                }


                <hr />
                <div class="details-inner">
                    <div class="details-divider">
                        <p class="card-description">
                            @if (selectedJob?.JobPost?.Description2 != null)
                            {
                                @selectedJob?.JobPost?.Description2
                            }
                            else
                            {
                                <span>--------------</span>
                            }
                        </p>
                    </div>

                    <div class="details-divider">
                        <p class="card-details">Other Details</p>
                        <p class="card-details-in">
                            @if (selectedJob?.JobPost?.EducationalAttainment != null)
                            {
                                <span class="card-span">Must be: </span>
                                @($"{selectedJob?.JobPost?.EducationalAttainment}")
                            }
                        </p>
                        <p class="card-details-in">
                            @if (selectedJob?.JobPost?.WorkExperience != null)
                            {
                                <span class="card-span">Work Experience: </span>
                                @($"{selectedJob?.JobPost?.WorkExperience}")
                            }
                        </p>
                        <p class="card-details-in">
                            @if (selectedJob?.JobPost?.NumberOfVacancy > 0)
                            {
                                <span class="card-span">Number of vacancies: </span>
                                @($"{selectedJob?.JobPost?.NumberOfVacancy}")
                            }
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Gender:</span>
                            @if (selectedJob?.JobPost?.Gender != null)
                            {
                                @($"{selectedJob?.JobPost?.Gender}")
                            }
                            else
                            {
                                <span>Any</span>
                            }
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Age:</span>
                            @if (selectedJob?.JobPost?.AgeFrom != 0 && selectedJob?.JobPost?.AgeTo != 0)
                            {
                                @($"{selectedJob?.JobPost?.AgeFrom} to {selectedJob?.JobPost?.AgeTo}")
                            }
                            else
                            {
                                <span>No required</span>
                            }
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private AccountAndInformationViewModel? profile;
    private bool isUserLoggedIn = false;
    private bool loaded = false;

    private List<JobPostViewModel>? jobList;
    private JobPostViewModel? selectedJob;

    private string searchTerm = string.Empty;
    private string selectedFilter = "All"; // Default: show all
    private string userId = string.Empty; // store userId globally

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId"); // <-- store here
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                try
                {
                    var response = await Http.GetAsync($"/api/Applicant/GetApplicantProfile/{userId}");

                    if (response.IsSuccessStatusCode)
                    {
                        var json = await response.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(json,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                        // Load job list after confirming user profile
                        jobList = await Http.GetFromJsonAsync<List<JobPostViewModel>>("/api/Applicant/GetJobLists");
                        if (jobList != null)
                        {
                            SortJobList(); // <-- apply initial sorting
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }

                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }
    private bool sortLatestFirst = true;
    private void ToggleSort()
    {
        sortLatestFirst = !sortLatestFirst;
        SortJobList();
    }

    private void SortJobList()
    {
        if (jobList == null) return;

        // Use JobPost.DatePosted for sorting, fallback to DatePosted if null
        if (sortLatestFirst)
        {
            jobList = jobList
                .OrderByDescending(j => j.JobPost?.DatePosted ?? j.DatePosted)
                .ToList();
        }
        else
        {
            jobList = jobList
                .OrderBy(j => j.JobPost?.DatePosted ?? j.DatePosted)
                .ToList();
        }

        StateHasChanged();
    }

    public class ApplicationCheckResponse
    {
        public bool IsExist { get; set; }
    }
    private bool hasAlreadyApplied = false;

    private async Task SelectJob(JobPostViewModel job)
    {
        selectedJob = job;
        hasAlreadyApplied = false;

        if (selectedJob?.JobPost?.Id != null && profile?.ApplicantInformation?.Id != null)
        {
            try
            {
                var userId = profile.ApplicantInformation.AccountId;
                var jobId = selectedJob.JobPost.Id;

                var response = await Http.GetAsync($"/api/Applicant/CheckIfAlreadyApplied/{userId}/{jobId}");

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<ApplicationCheckResponse>();
                    hasAlreadyApplied = result?.IsExist ?? false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking application: {ex.Message}");
            }
        }

        StateHasChanged();
    }

    public class JobPostViewModel
    {
        public EmployerDetails? EmpDetails { get; set; }
        public EmployerJobPost? JobPost { get; set; }
        public string? FirstImage { get; set; }
        public DateTime DatePosted { get; set; }
    }

    private string? GetEstablishmentName(JobPostViewModel job)
    {
        if (job.JobPost?.EmployerDetailsId != null && job.EmpDetails?.Id != null)
        {
            if (job.JobPost.EmployerDetailsId == job.EmpDetails.Id)
            {
                return job.EmpDetails.EstablishmentName;
            }
        }
        return "Unknown Establishment";
    }

    // *********************************************** APPLY JOB POP-UP  *********************************************** //

    private bool showApplyPopup = false;
    private string applicationEmail = string.Empty;
    private string applicationMessage = string.Empty;

    void ShowApplyPopup()
    {
        // Prefill email from profile if available
        applicationEmail = profile?.ApplicantInformation?.Email ?? string.Empty;
        applicationMessage = string.Empty;
        uploadedFiles.Clear();
        showApplyPopup = true;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFiles = e.GetMultipleFiles().ToList();
    }

    private List<IBrowserFile> uploadedFiles = new();
    // Removed unused fields: ElementReference _input and filesToUpload
    private List<AttachementsViewModel> listOfAttachments = new();
    private bool isLoading = false;

    private async Task SubmitApplication()
    {
        if (selectedJob?.JobPost?.Id == null)
        {
            await JS.InvokeVoidAsync("alert", "No job selected.");
            return;
        }

        if (string.IsNullOrWhiteSpace(applicationEmail) || string.IsNullOrWhiteSpace(applicationMessage))
        {
            await JS.InvokeVoidAsync("alert", "Please enter your email and message.");
            return;
        }

        if (string.IsNullOrEmpty(userId))
        {
            await JS.InvokeVoidAsync("alert", "User not logged in.");
            return;
        }

        if (!uploadedFiles.Any())
        {
            await JS.InvokeVoidAsync("alert", "Please upload at least one resume file.");
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();

            // Step 1: Save application metadata
            var payload = new
            {
                id = Guid.NewGuid().ToString(),
                email = applicationEmail,
                message = applicationMessage,
                jobPostId = selectedJob.JobPost.Id.ToString(),
                applicantId = userId,
                dateCreated = DateTime.UtcNow
            };

            var saveResponse = await Http.PostAsJsonAsync("/api/Applicant/SaveJobApplication", payload);
            if (!saveResponse.IsSuccessStatusCode)
            {
                var error = await saveResponse.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save application: {error}");
                return;
            }

            var savedApplication = await saveResponse.Content.ReadFromJsonAsync<JobApplicantion>();
            if (savedApplication == null || string.IsNullOrEmpty(savedApplication.Id))
            {
                await JS.InvokeVoidAsync("alert", "Application not saved properly.");
                return;
            }

            // Sanitize folder name before sending to server to avoid invalid path parts
            var applicationFolder = SanitizeFolderName(savedApplication.Id);

            // Step 2: Upload resume files
            const long maxFileSize = 10 * 1024 * 1024; // 10 MB
            var content = new MultipartFormDataContent();
            // keep header name "f" to remain compatible with server-side ApplicantController
            content.Headers.Add("f", applicationFolder);

            var streams = new List<System.IO.MemoryStream>();
            try
            {
                foreach (var file in uploadedFiles)
                {
                    if (file == null) continue;
                    if (file.Size > maxFileSize)
                    {
                        await JS.InvokeVoidAsync("alert", $"File '{file.Name}' exceeds 10 MB.");
                        return;
                    }

                    var ms = new System.IO.MemoryStream();
                    await file.OpenReadStream(maxFileSize).CopyToAsync(ms);
                    ms.Position = 0;
                    streams.Add(ms); // keep reference

                    content.Add(CreateFileContent(ms, file.Name, file.ContentType ?? "application/octet-stream"), "files", file.Name);
                }

                var uploadResponse = await Http.PostAsync("/api/Applicant/UploadApplicantResume", content);
                if (!uploadResponse.IsSuccessStatusCode)
                {
                    var error = await uploadResponse.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"File upload failed: {error}");
                    return;
                }

                await JS.InvokeVoidAsync("alert", "Application submitted successfully!");
                showApplyPopup = false;
                uploadedFiles.Clear();
            }
            finally
            {
                // Dispose memory streams after request
                foreach (var ms in streams)
                    ms.Dispose();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private static string SanitizeFolderName(string? folderName)
    {
        if (string.IsNullOrWhiteSpace(folderName))
            return Guid.NewGuid().ToString("N");

        try
        {
            var invalid = System.IO.Path.GetInvalidFileNameChars().ToHashSet();
            var filtered = new string(folderName.Where(c => !invalid.Contains(c) && c != '/' && c != '\\').ToArray());
            if (string.IsNullOrWhiteSpace(filtered))
                return Guid.NewGuid().ToString("N");
            // Optionally trim length
            if (filtered.Length > 100)
                return filtered.Substring(0, 100);
            return filtered;
        }
        catch
        {
            return Guid.NewGuid().ToString("N");
        }
    }

    public static StreamContent CreateFileContent(System.IO.Stream stream, string fileName, string contentType)
    {
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        {
            Name = "\"files\"",
            FileName = "\"" + fileName + "\""
        };
        try
        {
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(contentType);
        }
        catch { }
        return fileContent;
    }

}
