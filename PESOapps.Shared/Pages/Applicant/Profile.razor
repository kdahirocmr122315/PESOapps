@page "/Profile/dash"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using webapi_peso.ViewModels
@using System.Text.Json
<PageTitle>Profile</PageTitle>
@if (!isUserLoggedIn)
{

}
else if (profile == null)
{
    <p>Loading...</p>
}
else
{
    <div class="profile-page">
        <!-- Cover Photo -->
        <div class="prof-cover">
            <!-- Profile Picture -->
            <div class="profile-picture position-absolute" style="bottom: -60px; left: 30px;">
                <img src="_content/PESOapps.Shared/images/profile_placeholder.png"
                     class="rounded-circle border border-white shadow"
                     style="width: 120px; height: 120px; object-fit: cover;" />
            </div>
        </div>

        <!-- Main Profile Content -->
        <div class="prof-container">
            <div class="prof-flex d-flex justify-content-between align-items-start flex-wrap">
                <div>
                    <h3 class="fw-bold mb-1">
                        @profile.ApplicantInformation?.FirstName @profile.ApplicantInformation?.MiddleName @profile.ApplicantInformation?.SurName @profile.ApplicantInformation?.Suffix
                    </h3>
                    <p class="text-muted mb-2">@profile.ApplicantInformation?.Email</p>
                </div>
            </div>

            <!-- Profile Summary Section -->
            <div class="row mt-4">
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Phone</p>
                    <p>@profile.ApplicantInformation?.CellphoneNumber</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Date of Birth</p>
                    <p>
                        @if (profile.ApplicantInformation?.DateOfBirth is not null)
                        {
                            @DateTimeOffset.FromUnixTimeMilliseconds(profile.ApplicantInformation.DateOfBirth).ToString("MMMM dd, yyyy")
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Place of Birth</p>
                    <p>@profile.ApplicantInformation?.PlaceOfBirth</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Gender</p>
                    <p>@profile.ApplicantInformation?.Gender</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Religion</p>
                    <p>@profile.ApplicantInformation?.Religion</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Civil Status</p>
                    <p>@profile.ApplicantInformation?.CivilStatus</p>
                </div>
            </div>
        </div>


        <div class="profile-feeds">
            @foreach (var post in applications?.OrderByDescending(p => p.DateCreated) ?? Enumerable.Empty<AppliedJobsViewModel>())
            {
                <article class="feed-card">
                    <header class="feed-card__header">
                        <img src="_content/PESOapps.Shared/images/profile_placeholder.png"
                             class="avatar" />

                        <div class="meta">
                            <div class="name">
                                @profile.ApplicantInformation?.FirstName
                                @profile.ApplicantInformation?.MiddleName
                                @profile.ApplicantInformation?.SurName
                                @profile.ApplicantInformation?.Suffix
                            </div>
                            <div class="info">
                                <span>@post.DateCreated.ToString("MMMM dd, yyyy hh:mm tt")</span>
                                <span class="fa fa-lock"></span>
                            </div>
                        </div>
                    </header>

                    <section class="feed-card__body">
                        <p>Applied Job</p>
                        <h3>@(post.EmployerDetails?.JobPosts?.FirstOrDefault()?.Description ?? "No Description")</h3>
                        <p>@post.EmployerDetails?.EstablishmentName</p>
                    </section>
                </article>
            }
        </div>
    </div>
}

@code {
    private bool isUserLoggedIn = false;
    private AccountAndInformationViewModel? profile;

    // ⭐ NEW – holds the applications returned by the new endpoint
    private List<AppliedJobsViewModel>? applications;

    private bool loaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            // 1️⃣ Get auth info from localStorage
            var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;

                // 2️⃣ Attach JWT to every request
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                try
                {
                    /* ─────────────────────────────────────────
                       A. Fetch applicant profile (your old call)
                       ───────────────────────────────────────── */
                    var profileResponse =
                        await Http.GetAsync($"api/Applicant/GetApplicantProfile/{userId}");

                    if (profileResponse.IsSuccessStatusCode)
                    {
                        var json = await profileResponse.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(
                            json,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }
                    else
                    {
                        Console.WriteLine($"Profile call failed: {profileResponse.StatusCode}");
                    }

                    /* ─────────────────────────────────────────
                       B. Fetch ALL applications for this user
                       ───────────────────────────────────────── */
                    var appsResponse =
                        await Http.GetAsync($"api/Applicant/GetAllApplicationsByApplicant/{userId}");

                    if (appsResponse.IsSuccessStatusCode)
                    {
                        var appsJson = await appsResponse.Content.ReadAsStringAsync();
                        applications = JsonSerializer.Deserialize<List<AppliedJobsViewModel>>(
                            appsJson,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }
                    else
                    {
                        Console.WriteLine($"Applications call failed: {appsResponse.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error fetching data: " + ex.Message);
                }

                StateHasChanged(); // Refresh the UI once we have data
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }

    /* ─────────────────────────────────────────────
       Optional: expose a quick helper for the UI
    ───────────────────────────────────────────── */
    private int ApplicationCount => applications?.Count ?? 0;
}
