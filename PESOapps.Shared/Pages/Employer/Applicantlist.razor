@page "/list/employer"

@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json.Serialization
@using webapi_peso.Model
@using webapi_peso.ViewModels

<h3>Nearby Applicants</h3>

<div class="mb-3">
    <label>Region:</label>
    <select @onchange="OnRegionChanged" bind="SelectedRegionCode">
        <option value="">Select Region</option>
        @foreach (var region in Regions)
        {
            <option value="@region.RegCode">@region.RegDesc</option>
        }
    </select>
</div>
<div class="mb-3">
    <label>Province:</label>
    <select @onchange="OnProvinceChanged" bind="SelectedProvinceCode" disabled="@(!FilteredProvinces.Any())" required>
        <option value="">Select Province</option>
        @foreach (var province in FilteredProvinces)
        {
            <option value="@province.ProvCode">@province.ProvDesc</option>
        }
    </select>
</div>
<div class="mb-3">
    <label>City/Municipality:</label>
    <select @onchange="OnCityChanged" bind="SelectedCityCode" disabled="@(!FilteredCities.Any())" required>
        <option value="">Select City/Municipality</option>
        @foreach (var city in FilteredCities)
        {
            <option value="@city.CityMunCode">@city.CityMunDesc</option>
        }
    </select>
</div>
<div class="mb-3">
    <label>Barangay:</label>
    <select class="form-select" @bind="SelectedBarangayCode" disabled="@(!FilteredBarangays.Any())">
        <option value="">-- Select Barangay --</option>
        @foreach (var barangay in FilteredBarangays)
        {
            <option value="@barangay.BrgyCode">@barangay.BrgyDesc</option>
        }
    </select>
</div>
<button class="btn btn-primary mb-3" @onclick="OnSearchClicked">Search</button>

@if (IsError)
{
    <div class="alert alert-danger">
        Unable to load applicants. The resource was not found (404).
    </div>
}
else if (Applicants == null)
{
    <p>Loading...</p>
}
else if (Applicants.Count == 0)
{
    <p>No applicants found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Name</th>
                <th>Gender</th>
                <th>Cellphone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var applicant in Applicants)
            {
                <tr>
                    <td>@applicant.Email</td>
                    <td>@($"{applicant.FirstName} {applicant.SurName}")</td>
                    <td>@applicant.Gender</td>
                    <td>@applicant.CellphoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(DebugMessage))
{
    <div class="alert alert-info">
        <strong>Debug:</strong> @DebugMessage
    </div>
}

@code {
    public class VirtualizedDatViewModel
    {
        public List<ApplicantInformation> Items { get; set; } = new();
        public int TotalCount { get; set; }
    }

    public class Region
    {
        [JsonPropertyName("regCode")]
        public string RegCode { get; set; } = "";
        public int Id { get; set; }
        public string RegDesc { get; set; } = "";
        public string PsgcCode { get; set; } = "";
    }
    public class Province
    {
        public int Id { get; set; }
        public string ProvCode { get; set; } = "";
        public string ProvDesc { get; set; } = "";
        public string RegCode { get; set; } = "";
        public string PsgcCode { get; set; } = "";
    }
    public class City
    {
        public int Id { get; set; }
        public string CityMunCode { get; set; } = "";
        public string CityMunDesc { get; set; } = "";
        public string ProvCode { get; set; } = "";
        public string PsgcCode { get; set; } = "";
    }
    public class Barangay
    {
        public int Id { get; set; }
        public string BrgyCode { get; set; } = "";
        public string BrgyDesc { get; set; } = "";
        public string RegCode { get; set; } = "";
        public string ProvCode { get; set; } = "";
        public string CityMunCode { get; set; } = "";
    }

    private List<ApplicantInformation> Applicants { get; set; } = new();
    private bool IsError { get; set; } = false;

    private List<Region> Regions = new();
    private List<Province> Provinces = new();
    private List<City> Cities = new();
    private List<Barangay> Barangays = new();

    private string DebugMessage { get; set; } = "";

    // Filter state
    private string SelectedRegionCode { get; set; } = "";
    private string SelectedProvinceCode { get; set; } = "";
    private string SelectedCityCode { get; set; } = "";
    private string SelectedBarangayCode { get; set; } = "";

    private List<Province> FilteredProvinces => Provinces.Where(p => p.RegCode == SelectedRegionCode).ToList();
    private List<City> FilteredCities => Cities.Where(c => c.ProvCode == SelectedProvinceCode).ToList();
    private List<Barangay> FilteredBarangays => Barangays.Where(b => b.CityMunCode == SelectedCityCode).ToList();

    private EmployerDetailsViewModel? EmployerDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DebugMessage = "Initializing component...";
        await LoadLocationJsonsAsync();
        await LoadEmployerDetailsAndSetDefaults();
        await FetchAllApplicants();
    }

    private async Task LoadLocationJsonsAsync()
    {
        DebugMessage = "Loading location JSONs...";
        Regions = await Http.GetFromJsonAsync<List<Region>>("https://localhost:7283/pesobeta/_content/PESOapps.Shared/json/refregion.json") ?? new();
        Provinces = await Http.GetFromJsonAsync<List<Province>>("https://localhost:7283/pesobeta/_content/PESOapps.Shared/json/refprovince.json") ?? new();
        Cities = await Http.GetFromJsonAsync<List<City>>("https://localhost:7283/pesobeta/_content/PESOapps.Shared/json/refcitymun.json") ?? new();
        Barangays = await Http.GetFromJsonAsync<List<Barangay>>("https://localhost:7283/pesobeta/_content/PESOapps.Shared/json/refbrgy.json") ?? new();
    }

    private async Task LoadEmployerDetailsAndSetDefaults()
    {
        DebugMessage = "Fetching UserId from localStorage for defaults...";
        var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
        if (string.IsNullOrEmpty(userId))
        {
            DebugMessage = "UserId is missing for defaults.";
            return;
        }

        var employerDetailsResponse = await Http.GetAsync($"api/Employer/GetEmployerDetailsByEmail/{userId}");
        if (!employerDetailsResponse.IsSuccessStatusCode)
        {
            DebugMessage = $"Error fetching employer details for defaults: {employerDetailsResponse.StatusCode}";
            return;
        }

        EmployerDetails = await employerDetailsResponse.Content.ReadFromJsonAsync<EmployerDetailsViewModel>();
        if (EmployerDetails?.EmployerDetails != null)
        {
            SelectedRegionCode = EmployerDetails.EmployerDetails.Region ?? "";
            SelectedProvinceCode = EmployerDetails.EmployerDetails.Province ?? "";
            SelectedCityCode = EmployerDetails.EmployerDetails.CityMunicipality ?? "";
            SelectedBarangayCode = EmployerDetails.EmployerDetails.Barangay ?? "";
        }
    }

    private async Task FetchAllApplicants()
    {
        DebugMessage = "Fetching UserId from localStorage...";
        var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
        if (string.IsNullOrEmpty(userId))
        {
            DebugMessage = "UserId is missing.";
            Console.WriteLine("UserId is missing.");
            IsError = true;
            return;
        }

        DebugMessage = $"UserId found: {userId}. Fetching employer details...";
        var employerDetailsResponse = await Http.GetAsync($"api/Employer/GetEmployerDetailsByEmail/{userId}");
        if (!employerDetailsResponse.IsSuccessStatusCode)
        {
            DebugMessage = $"Error fetching employer details: {employerDetailsResponse.StatusCode}";
            Console.WriteLine($"Error fetching employer details: {employerDetailsResponse.StatusCode}");
            IsError = employerDetailsResponse.StatusCode == System.Net.HttpStatusCode.NotFound;
            return;
        }

        var employerDetails = await employerDetailsResponse.Content.ReadFromJsonAsync<EmployerDetailsViewModel>();
        if (employerDetails == null || employerDetails.EmployerDetails == null)
        {
            DebugMessage = "Employer details not found.";
            Console.WriteLine("Employer details not found.");
            IsError = true;
            return;
        }

        DebugMessage = "Requesting all applicants (no location filter)...";
        var request = new
        {
            employerId = userId,
            txtSearch = "",
            skills = new List<string>(),
            listOfAppInformation = new List<object>(),
            regionCode = "",
            regionDesc = "",
            provinceCode = "",
            provinceDesc = "",
            cityCode = "",
            cityDesc = "",
            barangayCode = "",
            barangayDesc = "",
            dateFrom = DateTime.Now,
            dateTo = DateTime.Now,
            selectedExportDate = DateTime.Now,
            isExport = false,
            startIndex = 0,
            count = 100, // Show more by default
            gender = ""
        };

        var response = await Http.PostAsJsonAsync("api/Employer/GetNearbyApplicantsV2", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<VirtualizedDatViewModel>();
            if (result?.Items != null)
            {
                Applicants = result.Items;
                DebugMessage = $"Fetched {Applicants.Count} applicants.";
            }
            else
            {
                DebugMessage = "No applicants found in response.";
            }
        }
        else
        {
            DebugMessage = $"Error fetching applicants: {response.StatusCode}";
            Console.WriteLine($"Error fetching applicants: {response.StatusCode}");
            IsError = response.StatusCode == System.Net.HttpStatusCode.NotFound;
        }
    }

    private async Task FetchNearbyApplicants(string? regionCode = null, string? provinceCode = null, string? cityCode = null, string? barangayCode = null)
    {
        DebugMessage = "Fetching UserId from localStorage...";
        var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
        if (string.IsNullOrEmpty(userId))
        {
            DebugMessage = "UserId is missing.";
            Console.WriteLine("UserId is missing.");
            IsError = true;
            return;
        }

        DebugMessage = $"UserId found: {userId}. Fetching employer details...";
        var employerDetailsResponse = await Http.GetAsync($"api/Employer/GetEmployerDetailsByEmail/{userId}");
        if (!employerDetailsResponse.IsSuccessStatusCode)
        {
            DebugMessage = $"Error fetching employer details: {employerDetailsResponse.StatusCode}";
            Console.WriteLine($"Error fetching employer details: {employerDetailsResponse.StatusCode}");
            IsError = employerDetailsResponse.StatusCode == System.Net.HttpStatusCode.NotFound;
            return;
        }

        var employerDetails = await employerDetailsResponse.Content.ReadFromJsonAsync<EmployerDetailsViewModel>();
        if (employerDetails == null || employerDetails.EmployerDetails == null)
        {
            DebugMessage = "Employer details not found.";
            Console.WriteLine("Employer details not found.");
            IsError = true;
            return;
        }

        // Use filter if provided, else use employer's location
        var regionCodeToUse = regionCode ?? employerDetails.EmployerDetails.Region ?? "";
        var provinceCodeToUse = provinceCode ?? employerDetails.EmployerDetails.Province ?? "";
        var cityCodeToUse = cityCode ?? employerDetails.EmployerDetails.CityMunicipality ?? "";
        var barangayCodeToUse = barangayCode ?? employerDetails.EmployerDetails.Barangay ?? "";

        var regionDesc = Regions.FirstOrDefault(r => r.RegCode == regionCodeToUse)?.RegDesc ?? "";
        var provinceDesc = Provinces.FirstOrDefault(p => p.ProvCode == provinceCodeToUse)?.ProvDesc ?? "";
        var cityDesc = Cities.FirstOrDefault(c => c.CityMunCode == cityCodeToUse)?.CityMunDesc ?? "";
        var barangayDesc = Barangays.FirstOrDefault(b => b.BrgyCode == barangayCodeToUse)?.BrgyDesc ?? "";

        DebugMessage = $"Location: Region={regionDesc}, Province={provinceDesc}, City={cityDesc}, Barangay={barangayDesc}. Fetching nearby applicants...";

        DebugMessage = $"Requesting applicants with: regionCode={regionCodeToUse}, provinceCode={provinceCodeToUse}, cityCode={cityCodeToUse}, barangayCode={barangayCodeToUse}";

        var request = new
        {
            employerId = userId,
            txtSearch = "",
            skills = new List<string>(),
            listOfAppInformation = new List<object>(),
            regionCode = regionCodeToUse,
            regionDesc = regionDesc,
            provinceCode = provinceCodeToUse,
            provinceDesc = provinceDesc,
            cityCode = cityCodeToUse,
            cityDesc = cityDesc,
            barangayCode = barangayCodeToUse,
            barangayDesc = barangayDesc,
            dateFrom = DateTime.Now,
            dateTo = DateTime.Now,
            selectedExportDate = DateTime.Now,
            isExport = false,
            startIndex = 0,
            count = 10,
            gender = ""
        };

        var response = await Http.PostAsJsonAsync("api/Employer/GetNearbyApplicantsV2", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<VirtualizedDatViewModel>();
            if (result?.Items != null)
            {
                Applicants = result.Items;
                DebugMessage = $"Fetched {Applicants.Count} applicants.";
            }
            else
            {
                DebugMessage = "No applicants found in response.";
            }
        }
        else
        {
            DebugMessage = $"Error fetching applicants: {response.StatusCode}";
            Console.WriteLine($"Error fetching applicants: {response.StatusCode}");
            IsError = response.StatusCode == System.Net.HttpStatusCode.NotFound;
        }
    }

    private async Task OnSearchClicked()
    {
        await FetchNearbyApplicants(
            string.IsNullOrEmpty(SelectedRegionCode) ? null : SelectedRegionCode,
            string.IsNullOrEmpty(SelectedProvinceCode) ? null : SelectedProvinceCode,
            string.IsNullOrEmpty(SelectedCityCode) ? null : SelectedCityCode,
            string.IsNullOrEmpty(SelectedBarangayCode) ? null : SelectedBarangayCode
        );
    }

    private void OnRegionChanged(ChangeEventArgs e)
    {
        SelectedRegionCode = e.Value?.ToString() ?? "";
        SelectedProvinceCode = "";
        SelectedCityCode = "";
        SelectedBarangayCode = "";
    }

    private void OnProvinceChanged(ChangeEventArgs e)
    {
        SelectedProvinceCode = e.Value?.ToString() ?? "";
        SelectedCityCode = "";
        SelectedBarangayCode = "";
    }

    private void OnCityChanged(ChangeEventArgs e)
    {
        SelectedCityCode = e.Value?.ToString() ?? "";
        SelectedBarangayCode = "";
    }
}
