@page "/list/employer"
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@using webapi_peso.Model
@using webapi_peso.ViewModels
@if (!isUserLoggedIn)
{

}
else if (profile == null)
{
    <p>Loading...</p>
}
else
{
    <div class="applicant-board">
        <div class="applicant-list">
            @if (applicantList == null)
            {
                <p>Loading applicants...</p>
            }
            else
            {
                @foreach (var applicant in applicantList)
                {
                    <div class="applicant-card @(selectedApplicant?.ApplicantInformation?.Id == applicant.ApplicantInformation?.Id ? "selected" : "")" @onclick="@(() => SelectApplicant(applicant))">
                        <div class="card-name elips">@GetApplicantFullName(applicant)</div>
                        <p>@applicant.ApplicantInformation?.PresentMunicipalityCity, @applicant.ApplicantInformation?.PresentProvince</p>
                        <p class="muted">@applicant.ApplicantInformation?.Email</p>
                    </div>
                }
            }
        </div>

        <div class="applicant-details">
            @if (selectedApplicant != null)
            {
                <div class="card-name">@GetApplicantFullName(selectedApplicant)</div>
                <p>@selectedApplicant.ApplicantInformation?.PresentMunicipalityCity, @selectedApplicant.ApplicantInformation?.PresentProvince</p>
                <p class="muted">@selectedApplicant.ApplicantInformation?.Email</p>
                <hr />
                <div class="details-inner">
                    <div class="details-divider">
                        <p class="card-details">Other Details</p>
                        <p class="card-details-in">
                            <span class="card-span">Gender: </span>
                            @selectedApplicant.ApplicantInformation?.Gender
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Date of Birth: </span>
                            @if (selectedApplicant.ApplicantInformation?.DateOfBirth > 0)
                            {
                                @DateTimeOffset.FromUnixTimeMilliseconds(selectedApplicant.ApplicantInformation.DateOfBirth).DateTime.ToString("MMMM dd, yyyy")
                            }
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Civil Status: </span>
                            @selectedApplicant.ApplicantInformation?.CivilStatus
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Cellphone: </span>
                            @selectedApplicant.ApplicantInformation?.CellphoneNumber
                        </p>
                        <p class="card-details-in">
                            <span class="card-span">Religion: </span>
                            @selectedApplicant.ApplicantInformation?.Religion
                        </p>
                    </div>
                </div>
            }
            else
            {

            }
        </div>
    </div>
}
@code {
    private AccountAndInformationViewModel? profile;
    private bool isUserLoggedIn = false;
    private bool loaded = false;

    private List<NearbyApplicantViewModel>? applicantList;
    private NearbyApplicantViewModel? selectedApplicant;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                try
                {
                    var response = await Http.GetAsync($"http://localhost:5167/api/Applicant/GetApplicantProfile/{userId}");

                    if (response.IsSuccessStatusCode)
                    {
                        var json = await response.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(json,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                        // Use POST to fetch applicant list
                        var postResponse = await Http.PostAsync("http://localhost:5167/api/Employer/GetNearbyApplicantsV2", null);
                        if (postResponse.IsSuccessStatusCode)
                        {
                            var applicantsJson = await postResponse.Content.ReadAsStringAsync();
                            applicantList = JsonSerializer.Deserialize<List<NearbyApplicantViewModel>>(applicantsJson,
                                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }

                StateHasChanged(); // Refresh the UI
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }

    void SelectApplicant(NearbyApplicantViewModel applicant)
    {
        selectedApplicant = applicant;
    }

    private string GetApplicantFullName(NearbyApplicantViewModel applicant)
    {
        var info = applicant.ApplicantInformation;
        if (info == null) return "Unknown Applicant";
        var fullName = $"{info.FirstName} {info.MiddleName} {info.SurName}".Replace("  ", " ").Trim();
        return string.IsNullOrWhiteSpace(fullName) ? "Unknown Applicant" : fullName;
    }

    // You may need to define this ViewModel if not already present in your shared models
    public class NearbyApplicantViewModel
    {
        public ApplicantInformation? ApplicantInformation { get; set; }
        public ApplicantAccount? ApplicantAccount { get; set; }
        public UserAccount? UserAccount { get; set; }
    }
}