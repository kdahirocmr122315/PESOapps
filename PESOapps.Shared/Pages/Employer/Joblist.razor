@page "/Joblist/employer"
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@using webapi_peso.Model
@using webapi_peso.ViewModels

@if (!isUserLoggedIn)
{
    <p>Redirecting to login...</p>
}
else if (profile == null)
{
    <p>Loading profile...</p>
}
else if (jobPosts == null)
{
    <p>Loading jobs...</p>
}
else if (!jobPosts.Any())
{
    <p>No job postings available.</p>
}
else
{
    <div class="job-board">
        <div class="job-list">
            @foreach (var post in jobPosts.OrderByDescending(p => p.DatePosted))
            {
                bool isExpired = post.Expiry < DateTime.Now;

                <div class="job-card @(selectedJobPost?.Id == post.Id ? "selected" : "")"
                     @onclick="@(() => SelectJob(post))">
                    <div class="card-name elips">@post.Description</div>
                    @if (isExpired)
                    {
                        <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                    }
                    else
                    {
                        <strong>AVAILABLE</strong>
                    }
                    <p class="card-date">
                        <em>@(post.DatePosted.ToString("MMMM dd, yyyy"))</em>
                    </p>
                </div>
            }
        </div>

        <div class="job-details">
            @if (selectedJobPost != null)
            {
                bool isExpired = selectedJobPost.Expiry < DateTime.Now;

                <div class="card-name">@selectedJobPost.Description</div>
                @if (isExpired)
                {
                    <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                }
                else
                {
                    <strong>AVAILABLE</strong>
                }
                <p class="card-date">
                    <em>@(selectedJobPost.DatePosted.ToString("MMMM dd, yyyy"))</em>
                </p>
                <p class="card-details-sal">
                    @string.Format(new System.Globalization.CultureInfo("en-PH"), "{0:C}", selectedJobPost.Salary ?? 0)
                </p>
                <hr />
                <div class="details-inner">
                    <strong>Description:</strong>
                    <p class="card-description">@selectedJobPost.Description2</p>
                </div>
            }
            else
            {
                <p>Select a job to see details.</p>
            }
        </div>
    </div>
}

@code {
    private AccountAndInformationViewModel? profile;
    private bool isUserLoggedIn = false;
    private bool loaded = false;

    private EmployerDetails? employerDetails;
    private List<EmployerJobPost>? jobPosts;
    private EmployerJobPost? selectedJobPost;

    private string initialBearerToken = "your-bearer-token-here";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;

                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", initialBearerToken);

                try
                {
                    var profileResponse = await Http.GetAsync($"http://localhost:5167/api/Applicant/GetApplicantProfile/{userId}");
                    if (profileResponse.IsSuccessStatusCode)
                    {
                        var json = await profileResponse.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(json, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true 
                        });

                        var jobResponse = await Http.GetAsync($"http://localhost:5167/api/Employer/GetEstablishmentDataWithUserAccountId/{userId}");
                        if (jobResponse.IsSuccessStatusCode)
                        {
                            var rawJson = await jobResponse.Content.ReadAsStringAsync();
                            var employerData = JsonSerializer.Deserialize<EmployerRegistrationViewModel>(rawJson, new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });

                            if (employerData != null)
                            {
                                employerDetails = employerData.EmployerDetails;
                                jobPosts = employerDetails?.JobPosts ?? new List<EmployerJobPost>();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }

                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }

    void SelectJob(EmployerJobPost post)
    {
        selectedJobPost = post;
    }

    public class EmployerRegistrationViewModel
    {
        public EmployerDetails? EmployerDetails { get; set; }
        public List<AttachementsViewModel>? ListOfAttachments { get; set; }
    }

    public class EmployerDetails
    {
        public string? Id { get; set; }
        public string? EstablishmentName { get; set; }
        public string? Address { get; set; }
        public List<EmployerJobPost>? JobPosts { get; set; }
        public DateTime? DateCreated { get; set; }
    }

    public class EmployerJobPost
    {
        public string? Id { get; set; }
        public string? Description { get; set; }
        public string? Description2 { get; set; }
        public decimal? Salary { get; set; }
        public DateTime DatePosted { get; set; }
        public DateTime Expiry { get; set; }
    }
}
