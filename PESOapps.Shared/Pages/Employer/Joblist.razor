@page "/Joblist/employer"
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@using PESOapps.Shared.Address
@using webapi_peso.Model
@using webapi_peso.ViewModels
<PageTitle>Job Portal</PageTitle>
@if (!isUserLoggedIn)
{
    <p>Redirecting to login...</p>
}
else if (profile == null)
{
    <p>Loading profile...</p>
}
else if (jobPosts == null)
{
    <p>Loading jobs...</p>
}
else if (!jobPosts.Any())
{
    <div class="no job-board">
        <p>No job postings available.</p>
        <div class="no-filter-bars">
            <button type="button" class="nsrp-toggle" @onclick="() => showAddJobModal = true">Post a Job</button>
        </div>
        @if (showAddJobModal)
        {
            <div class="modal-overlay">
                <div class="addjob-modal-content">
                    <h3>Post a Job</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-box">
                            <p>@errorMessage</p>
                        </div>
                    }
                    <div class="addjob-cont">
                        <div class="nsrp-grid">
                            <div>
                                <label>Job Title</label>
                                <input type="text" class="nsrp-input" @bind="newJob.Description" />
                                <p class="mud-input-helper-text">e.g. Service Crew, Data Encoder, Web Designer, etc.</p>
                            </div>
                            <div>
                                <label>Job Description</label>
                                <textarea class="nsrp-input" @bind="newJob.Description2"></textarea>
                                <p class="mud-input-helper-text">Please include the requirements, qualifications, instructions, etc.</p>
                            </div>
                        </div>

                        <div class="nsrp-grid">
                            <div>
                                <label>Educational Attainment</label>
                                <select class="nsrp-input" @bind="newJob.EducationalAttainment">
                                    <option value="">Select</option>
                                    <option value="HIGH SCHOOL LEVEL">HIGH SCHOOL LEVEL</option>
                                    <option value="HIGH SCHOOL GRADUATE">HIGH SCHOOL GRADUATE</option>
                                    <option value="COLLEGE LEVEL">COLLEGE LEVEL</option>
                                    <option value="COLLEGE GRADUATE">COLLEGE GRADUATE</option>
                                    <option value="POST GRADUATE/MASTERS DEGREE">POST GRADUATE/MASTERS DEGREE</option>
                                </select>
                            </div>

                            <div>
                                <label>Work Experience</label>
                                <select class="nsrp-input" @bind="newJob.WorkExperience">
                                    <option value="">Select</option>
                                    <option value="Less than a year">Less than a year</option>
                                    <option value="1 - 3 years">1 - 3 years</option>
                                    <option value="3 - 5 years">3 - 5 years</option>
                                    <option value="5+ years">5+ years</option>
                                </select>
                            </div>

                            <div>
                                <label>Number of Vacancy</label>
                                <input type="number"
                                       class="nsrp-input"
                                       @bind="newJob.NumberOfVacancy" required />
                            </div>

                            <div>
                                <label>Gender</label>
                                <select class="nsrp-input" @bind="newJob.Gender">
                                    <option value="">Select</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Any">Any</option>
                                </select>
                            </div>

                            <div>
                                <label>Age From</label>
                                <input type="number" class="nsrp-input" @bind="newJob.AgeFrom" required />
                            </div>

                            <div>
                                <label>Age To</label>
                                <input type="number" class="nsrp-input" @bind="newJob.AgeTo" required />
                            </div>

                            <div>
                                <label>Civil Status</label>
                                <input type="text"
                                       class="nsrp-input"
                                       @bind="newJob.CivilStatus" />
                            </div>

                            <div>
                                <label>Expected Salary (₱)</label>
                                <input type="number"
                                       class="nsrp-input"
                                       @bind="newJob.Salary" />
                            </div>
                        </div>

                        <div class="reason-section">
                            <label><strong>Reason for Job Opening:</strong></label>

                            <div>
                                <input type="checkbox" id="reasonExpansion" @bind="ReasonExpansion" />
                                <label for="reasonExpansion">Expansion</label>
                            </div>

                            <div>
                                <input type="checkbox" id="reasonReplaceMent" @bind="ReasonReplaceMent" />
                                <label for="reasonReplaceMent">Replacement</label>
                            </div>

                            <div>
                                <input type="checkbox" id="reasonOthers" @bind="ReasonOthers" />
                                <label for="reasonOthers">Others</label>
                            </div>
                        </div>

                    </div>
                    <!-- Optional extra fields -->
                    <div class="modal-actions">
                        <button class="nsrp-toggle" @onclick="PostAJob">Submit</button>
                        <button class="nsrp-toggle" @onclick="() => showAddJobModal = false">Cancel</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="job-board">

        @if (showAddJobModal)
        {
            <div class="modal-overlay">
                <div class="addjob-modal-content">
                    <h3>Post a Job</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-box">
                            <p>@errorMessage</p>
                        </div>
                    }
                    <div class="addjob-cont">
                        <div class="nsrp-grid">
                            <div>
                                <label>Job Title</label>
                                <input type="text" class="nsrp-input" @bind="newJob.Description" />
                                <p class="mud-input-helper-text">e.g. Service Crew, Data Encoder, Web Designer, etc.</p>
                            </div>
                            <div>
                                <label>Job Description</label>
                                <textarea class="nsrp-input" @bind="newJob.Description2"></textarea>
                                <p class="mud-input-helper-text">Please include the requirements, qualifications, instructions, etc.</p>
                            </div>
                        </div>

                        <div class="nsrp-grid">
                            <div>
                                <label>Educational Attainment</label>
                                <select class="nsrp-input" @bind="newJob.EducationalAttainment">
                                    <option value="">Select</option>
                                    <option value="HIGH SCHOOL LEVEL">HIGH SCHOOL LEVEL</option>
                                    <option value="HIGH SCHOOL GRADUATE">HIGH SCHOOL GRADUATE</option>
                                    <option value="COLLEGE LEVEL">COLLEGE LEVEL</option>
                                    <option value="COLLEGE GRADUATE">COLLEGE GRADUATE</option>
                                    <option value="POST GRADUATE/MASTERS DEGREE">POST GRADUATE/MASTERS DEGREE</option>
                                </select>
                            </div>

                            <div>
                                <label>Work Experience</label>
                                <select class="nsrp-input" @bind="newJob.WorkExperience">
                                    <option value="">Select</option>
                                    <option value="Less than a year">Less than a year</option>
                                    <option value="1 - 3 years">1 - 3 years</option>
                                    <option value="3 - 5 years">3 - 5 years</option>
                                    <option value="5+ years">5+ years</option>
                                </select>
                            </div>

                            <div>
                                <label>Number of Vacancy</label>
                                <input type="number"
                                       class="nsrp-input"
                                       @bind="newJob.NumberOfVacancy" required />
                            </div>

                            <div>
                                <label>Gender</label>
                                <select class="nsrp-input" @bind="newJob.Gender">
                                    <option value="">Select</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Any">Any</option>
                                </select>
                            </div>

                            <div>
                                <label>Age From</label>
                                <input type="number" class="nsrp-input" @bind="newJob.AgeFrom" required />
                            </div>

                            <div>
                                <label>Age To</label>
                                <input type="number" class="nsrp-input" @bind="newJob.AgeTo" required />
                            </div>

                            <div>
                                <label>Civil Status</label>
                                <input type="text"
                                       class="nsrp-input"
                                       @bind="newJob.CivilStatus" />
                            </div>

                            <div>
                                <label>Expected Salary (₱)</label>
                                <input type="number"
                                       class="nsrp-input"
                                       @bind="newJob.Salary" />
                            </div>
                        </div>

                        <div class="reason-section">
                            <label><strong>Reason for Job Opening:</strong></label>

                            <div>
                                <input type="checkbox" id="reasonExpansion" @bind="ReasonExpansion" />
                                <label for="reasonExpansion">Expansion</label>
                            </div>

                            <div>
                                <input type="checkbox" id="reasonReplaceMent" @bind="ReasonReplaceMent" />
                                <label for="reasonReplaceMent">Replacement</label>
                            </div>

                            <div>
                                <input type="checkbox" id="reasonOthers" @bind="ReasonOthers" />
                                <label for="reasonOthers">Others</label>
                            </div>
                        </div>


                    </div>
                    <!-- Optional extra fields -->
                    <div class="modal-actions">
                        <button class="nsrp-toggle" @onclick="PostAJob">Submit</button>
                        <button class="nsrp-toggle" @onclick="() => showAddJobModal = false">Cancel</button>
                    </div>
                </div>
            </div>
        }
        <div class="job-list">
            <!-- 🔍 Search Bar -->
            <div class="filter-bars">
                <button class="nsrp-toggle" @onclick="() => showAddJobModal = true">Post a Job</button>
                <button type="button" class="nsrp-toggle" @onclick="GoToInterviewed">Interviewed</button>
                <button type="button" class="nsrp-toggle" @onclick="GoToHired">Hired</button>
            </div>
            @foreach (var post in jobPosts.OrderByDescending(p => p.DatePosted))
            { 
                bool isExpired = post.Expiry < DateTime.Now;

                <div class="job-card @(selectedJobPost?.Id == post.Id ? "selected" : "")"
                     @onclick="@(() => SelectJob(post))">
                    <div class="card-name elips">@post.Description</div>
                    @if (isExpired)
                    {
                        <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                    }
                    else
                    {
                        <strong>AVAILABLE</strong>
                    }
                    <p class="card-date">
                        <em>@(post.DatePosted.ToString("MMMM dd, yyyy"))</em>
                    </p>
                </div>
            }
        </div>

        <div class="job-details Emp">
            <div class="job-div">
                @if (selectedJobPost != null)
                {
                    bool isExpired = selectedJobPost.Expiry < DateTime.Now;
                    <!-- ✅ Delete Button -->
                    <button class="nsrp-toggle bg-red float-right"
                            @onclick="() => ConfirmDelete(selectedJobPost.Id, selectedJobPost.EmployerDetailsId)">
                        Delete Job Post
                    </button>
                    <div class="card-name">@selectedJobPost.Description</div>
                    @if (isExpired)
                    {
                        <p class="muted" style="color:red;"><strong>This job has expired.</strong></p>
                    }
                    else
                    {
                        <strong>AVAILABLE</strong>
                    }
                    <p class="card-date">
                        <em>@(selectedJobPost.DatePosted.ToString("MMMM dd, yyyy"))</em>
                    </p>
                    <p class="card-details-sal">
                        @string.Format(new System.Globalization.CultureInfo("en-PH"), "{0:C}", selectedJobPost.Salary ?? 0)1
                    </p>
                    <hr />
                    <div class="details-inner">
                        <strong>Description:</strong>
                        <p class="card-description">@selectedJobPost.Description2</p>
                    </div>
                }
                else
                {
                    <p>Select a job to see details.</p>
                }
            </div>
            <div class="job-div">
              <!-- ───────────── Applicants table ───────────── -->
               <h5 class="mt-4 mb-2">Applicants</h5>
                 <div class="table-scroll">
                    @if (isApplicantsLoading)
                    {
                        <div class="custom-loader"></div>
                    }
                    else if (applicants?.Any() == true)
                    {
                        <table class="table table-bordered table-striped table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Applied On</th>
                                    <th>Attachments</th>
                                    <th class="text-center">Interviewed</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var a in applicants!)
                                {
                                    <tr style="cursor:pointer" @onclick="() => HandleRowClick(a)">
                                        <td class="align-middle" data-label="Name">@a.Applicant?.FirstName @a.Applicant?.MiddleName @a.Applicant?.SurName @a.Applicant?.Suffix</td>
                                        <td class="align-middle" data-label="Email">@a.Applicant?.Email</td>
                                        <td class="align-middle" data-label="Applied On">@a.DateApplied.ToString("MMMM dd, yyyy")</td>
                                        <td class="align-middle">
                                            @if (a.Attachments?.Any() == true)
                                            {
                                                foreach (var att in a.Attachments)
                                                {
                                                    var fileUrl = $"http://localhost:5167/files/applications/{att.FolderName}/{Uri.EscapeDataString(att.FileName)}";
                                                    <a @onclick:stopPropagation="true" href="@fileUrl" target="_blank">Attachment</a>
                                                    <br />
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted fst-italic">No attachments</span>
                                            }
                                        </td>
                                        <td class="text-center align-middle" data-label="Interviewed">
                                            @if (a.IsHired)
                                            {
                                                <span class="badge bg-primary">Hired</span>
                                            }
                                            else if (a.IsInterviewed)
                                            {
                                                <span class="badge bg-success">Interviewed</span>
                                            }
                                            else
                                            {
                                                <span class="badge nsrp-toggle" @onclick:stopPropagation="true"
                                                      @onclick="() => OpenScheduleInterviewModal(a)">
                                                    Schedule Interview
                                                </span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="fst-italic">No applicants for this job yet.</p>
                    }
                </div>
               @if (showScheduleModal && selectedApplicant != null)
                     {
                        <div class="modal-overlay Schedules-modal">
                            <div class="modal-content">
                                <h4>Schedule Interview for @selectedApplicant.ApplicantInformation.FirstName @selectedApplicant.ApplicantInformation.SurName</h4>
                                <label>Date & Time</label>
                                <p>Selected Date: @scheduleDate?.ToString("MMMM dd, yyyy")</p>
                                <input type="date" @bind="scheduleDate" class="nsrp-input" />
                                <div class="modal-actions">
                                    <button class="nsrp-toggle" @onclick="CloseScheduleInterviewModal">Cancel</button>
                                    <button class="nsrp-toggle" @onclick="SubmitScheduleInterview">Save</button>
                                </div>
                            </div>
                        </div>
                    }
            </div>
        </div>

        @if (isModalOpen && selectedApplicant != null)
        {
            <!-- Modal -->
            <div class="modal-overlay">
                <div class="modal-container">
                    <div class="modal-body">
                        <!-- Tabs -->
                        <div class="tabs">
                            <button class="tab-btn active" onclick="openTab(event, 'frontPage')">Front Page</button>
                            <button class="tab-btn" onclick="openTab(event, 'backPage')">Back Page</button>
                        </div>

                        <!-- Front Page -->
                        <div id="frontPage" class="tab-content active">
                            <div style="overflow-y: auto; padding: 5px;">

                                <p><strong>Reference#:</strong> @selectedApplicant.ApplicantInformation.JobFairReferenceCode</p>
                                <!-- Header -->
                                <table border="1" style="width:100%">
                                    <tr>
                                        <td style="text-align:center; padding:5px;">
                                            <p><b>NSRP Form 1</b></p>
                                            <p><b>January 2017</b></p>
                                        </td>
                                        <td style="text-align:center; padding:5px;">
                                            <p>Republic of the Philippines</p>
                                            <p>Department of Labor and Employment</p>
                                            <p><b>PESO EMPLOYMENT INFORMATION SYSTEM</b></p>
                                            <p><b>REGISTRATION FORM</b></p>
                                        </td>
                                    </tr>
                                </table>

                                <!-- Personal Information -->
                                <table border="1" style="width:100%; margin-top:5px;">
                                    <tr>
                                        <td colspan="4"><b>I. PERSONAL INFORMATION</b></td>
                                    </tr>
                                    <tr>
                                        <td class="text-center">@selectedApplicant.ApplicantInformation.SurName</td>
                                        <td class="text-center">@selectedApplicant.ApplicantInformation.FirstName</td>
                                        <td class="text-center">@selectedApplicant.ApplicantInformation.MiddleName</td>
                                        <td class="text-center">@selectedApplicant.ApplicantInformation.Suffix</td>
                                    </tr>
                                    <tr>
                                        <td class="text-center"><b>SURNAME</b></td>
                                        <td class="text-center"><b>FIRST NAME</b></td>
                                        <td class="text-center"><b>MIDDLE NAME</b></td>
                                        <td class="text-center"><b>SUFFIX</b> (Ex: Sr., Jr., III, etc)</td>
                                    </tr>
                                    <tr>
                                        <td><b>DATE OF BIRTH (mm/dd/yyyy)</b></td>
                                        <td>@DateOfBirthValueModal?.ToString("MM/dd/yyyy")</td>
                                        <td><b>PLACE OF BIRTH</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.PlaceOfBirth</td>
                                    </tr>
                                    <tr>
                                        <td><b>SEX</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.Gender</td>
                                        <td colspan="2"><b>PRESENT ADDRESS</b></td>
                                    </tr>
                                    <tr>
                                        <td><b>RELIGION</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.Religion</td>
                                        <td>House No./Street Village</td>
                                        <td>@selectedApplicant.ApplicantInformation.PresentHouseNoOrStreetVillage</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="3"><b>CIVIL STATUS</b></td>
                                        <td rowspan="3">Married</td>
                                        <td><small>Barangay</small></td>
                                        <td>
                                            <small>
                                                @{
                                                    var barangayName = FilteredBarangaysPresent
                                                    .FirstOrDefault(b => b.brgyCode == selectedApplicant.ApplicantInformation.PresentBarangay)?.brgyDesc;

                                                    @barangayName
                                                }
                                            </small>
                                        </td>

                                    </tr>
                                    <tr>
                                        <td><small>Municipality</small></td>
                                        <td>
                                            <small>
                                                @{
                                                    var cityName = FilteredCitiesPresent
                                                    .FirstOrDefault(c => c.citymunCode == selectedApplicant.ApplicantInformation.PresentMunicipalityCity)?.citymunDesc;

                                                    @cityName
                                                }
                                            </small>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><small>Province</small></td>
                                        <td>
                                            <small>
                                                @{
                                                    var provinceName = FilteredProvincesPresent
                                                    .FirstOrDefault(p => p.provCode == selectedApplicant.ApplicantInformation.PresentProvince)?.provDesc;

                                                    @provinceName
                                                }
                                            </small>
                                        </td>

                                    </tr>
                                    <tr>
                                        <td><b>TIN</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.TIN</td>
                                        <td><b>HEIGHT</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.Height</td>
                                    </tr>
                                    <tr>
                                        <td><b>GSIS/SSS ID NO.</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.GSISORSSS</td>
                                        <td><b>EMAIL ADDRESS</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.Email</td>
                                    </tr>
                                    <tr>
                                        <td><b>PAG-IBIG NO.</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.PAGIBIG</td>
                                        <td><b>LANDLINE NUMBER</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.LandlineNumber</td>
                                    </tr>
                                    <tr>
                                        <td><b>PHILHEALTH NO.</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.PHILHEALTH</td>
                                        <td><b>CELLPHONE NUMBER</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.CellphoneNumber</td>
                                    </tr>
                                    <tr>
                                        <td><b>DISABILITY</b></td>
                                        <td colspan="3"></td>
                                    </tr>
                                    <tr>
                                        <td><b>EMPLOYMENT STATUS</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.EmpStatus</td>
                                        <td><b>EMPLOYMENT TYPE</b></td>
                                        <td>@selectedApplicant.ApplicantInformation.EmpStatusChild</td>
                                    </tr>
                                    <tr>
                                        <td>Are you actively looking for work?</td>
                                        <td>@(selectedApplicant.ApplicantInformation.ActivelyLookingForWork == 1 ? "Yes" : "No")</td>
                                        <td>How long have you been looking for work?</td>
                                        <td>@selectedApplicant.ApplicantInformation.HowLongLookingForWork</td>
                                    </tr>
                                    <tr>
                                        <td>Willing to work immediately?</td>
                                        <td>@selectedApplicant.ApplicantInformation.WillingToWorkNow</td>
                                        <td>If no, When?</td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td colspan="4">II. JOB PREFERENCE</td>
                                    </tr>
                                    <tr>
                                        <td class="p-1"><b>PREFERRED OCCUPATION</b></td>
                                        <td class="p-1" colspan="3"><b>PREFERRED WORK LOCATION</b></td>
                                    </tr>
                                    <tr>
                                        <td class="p-1">
                                            <ul>
                                                @foreach (var jobPrefO in selectedApplicant.ApplicantJobPrefOccupation)
                                                {

                                                    <li>@jobPrefO.OccupationName</li>

                                                }
                                            </ul>
                                        </td>
                                        <td class="p-1" colspan="3">
                                            <ul>
                                                @foreach (var jobPrefW in selectedApplicant.ApplicantJobPrefWorkLocation ?? Enumerable.Empty<ApplicantJobPrefWorkLocation>()) 
                                                {
                                                    <li>@jobPrefW.WorkLocationName (@jobPrefW.WorkLocationType)</li>
                                                }
                                            </ul>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="2">
                                            <b>Expected Salary (Range): </b>
                                            ₱@(selectedApplicant.ApplicantExpectedSalary?.From ?? 0) - ₱@(selectedApplicant.ApplicantExpectedSalary?.To ?? 0)
                                        </td>
                                        <td><b>Passport No.: </b>@selectedApplicant.ApplicantInformation.PassportNumber</td>
                                        <td><b>Expiry Date: </b>@selectedApplicant.ApplicantInformation.PassportExpiryDate</td>
                                    </tr>
                                    <!-- Add the rest of your fields as needed... -->
                                </table>

                                <!-- Language / Dialect Proficiency -->
                                <table border="1" style="width:100%; margin-top:5px;">
                                    <tr>
                                        <td colspan="5"><b>III. LANGUAGE / DIALECT PROFICIENCY</b></td>
                                    </tr>
                                    <tr>
                                        <td><b>LANGUAGE</b></td>
                                        <td><b>READ</b></td>
                                        <td><b>WRITE</b></td>
                                        <td><b>SPEAK</b></td>
                                        <td><b>UNDERSTAND</b></td>
                                    </tr>

                                    @foreach (var lang in selectedApplicant.ApplicantLanguageDialectProf ?? new List<ApplicantLanguageDialectProf>())
                                    {
                                        <tr>
                                            <td>@lang.LanguageName</td>
                                            <td>@(lang.Read == 1 ? "YES" : "NO")</td>
                                            <td>@(lang.Write == 1 ? "YES" : "NO")</td>
                                            <td>@(lang.Speak == 1 ? "YES" : "NO")</td>
                                            <td>@(lang.Understand == 1 ? "YES" : "NO")</td>
                                        </tr>
                                    }
                                </table>

                            </div>
                        </div>

                        <!-- Back Page -->
                        <div id="backPage" class="tab-content">
                            <div style="overflow-y: auto; padding: 5px;">
                                <!-- Educational Background -->
                                <table border="1" style="width:100%">
                                    <tr>
                                        <td class="p-1" colspan="7"><b>IV. EDUCATIONAL BACKGROUND</b></td>
                                    </tr>
                                    <tr>
                                        <td class="text-center" rowspan="2"><b>LEVEL</b></td>
                                        <td class="text-center" rowspan="2"><b>SCHOOL</b></td>
                                        <td class="text-center" rowspan="2"><b>COURSE</b></td>
                                        <td class="text-center" rowspan="2"><b>YEAR GRAD.</b></td>
                                        <td class="text-center" colspan="2"><b>If undergraduate</b></td>
                                        <td class="text-center" rowspan="2"><b>AWARDS RECEIVED.</b></td>
                                    </tr>
                                    <tr>
                                        <td class="text-center">what level?</td>
                                        <td class="text-center">year last attended</td>
                                    </tr>
                                    @foreach (var EduBack in selectedApplicant.ApplicantEducationalBackground ?? new List<ApplicantEducationalBackground>())
                                    {
                                        <tr>
                                            <td class="text-center">@EduBack.LevelName</td>
                                            <td class="text-center">@EduBack.School</td>
                                            <td class="text-center">@EduBack.Course</td>
                                            <td class="text-center">@EduBack.YearGraduated</td>
                                            <td class="text-center">@EduBack.UndergradLevel</td>
                                            <td class="text-center">@EduBack.YearLastAttended</td>
                                            <td class="text-center">@EduBack.AwardsReceived</td>
                                        </tr>
                                    }
                                </table>

                                <!-- Technical/Vocational -->
                                <table border="1" style="width:100%; margin-top:5px;">
                                    <tr>
                                        <td class="p-1" colspan="7">
                                            <b>V. TECHNICAL/VOCATIONAL AND OTHER TRAINING</b> <small>(Include courses takens as part of college education)</small>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td class="text-center" colspan="2"><b>TRAINING/VOCATIONAL COURSE</b></td>
                                        <td class="text-center">
                                            <p><b>Duration</b></p>
                                            <small>(mm/dd/yyyy to mm/dd/yyyy)</small>
                                        </td>
                                        <td class="text-center"><b>Training Institution</b></td>
                                        <td class="text-center">
                                            <p><b>Certificates Received</b></p>
                                            <small>(NC I, NC II, NC IV, etc)</small>
                                        </td>
                                    </tr>
                                    @{
                                        var count = 1;
                                        var counts = 1;
                                        var countss = 1;
                                    }
                                    @foreach (var Voca in selectedApplicant.ApplicantTechnicalVocational ?? new List<ApplicantTechnicalVocational>())
                                    {
                                        <tr>
                                            <td class="text-center" style="width:1%"><b>@count.</b></td>
                                            <td class="text-center">@Voca.CourseName</td>
                                            <td class="text-center">@Voca.DurationFrom?.ToString("MM/dd/yyyy") to @Voca.DurationTo?.ToString("MM/dd/yyyy")</td>
                                            <td class="text-center">@Voca.TrainingInstitution</td>
                                            <td class="text-center">@Voca.CertifcateReceived</td>
                                        </tr>
                                        count++;
                                    }

                                </table>

                                <!-- Eligibility -->
                                <table border="1" style="width:100%; margin-top:5px;">

                                    <tr><td class="border border-dark" colspan="2"><b>VI. ELIGIBILITY/PROFESSIONAL LICENSE</b></td></tr>
                                    <tr>
                                        <td>
                                            <table style="width:100%">
                                                @foreach (var Eli in selectedApplicant.ApplicantEligibility ?? new List<ApplicantEligibility>())
                                                {

                                                    <tr>
                                                        <td class="text-center" colspan="2"><b>ELIGIBILITY (Civil Service)</b></td>
                                                        <td class="text-center"><b>Rating</b></td>
                                                        <td class="text-center"><b>Date of examination</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-center" style="width:1%">@counts.</td>
                                                        <td class="text-center">@Eli.EligibilityName</td>
                                                        <td class="text-center">@Eli.Rating%</td>
                                                        <td class="text-center">@Eli.DateOfExamination?.ToString("MMM dd, yyyy")</td>
                                                    </tr>
                                                    counts++;
                                                }
                                            </table>
                                        </td>
                                        <td>
                                            <table style="width:100%">
                                                @foreach (var Prc in selectedApplicant.ApplicantProfessionalLicense ?? new List<ApplicantProfessionalLicense>())
                                                {

                                                    <tr>
                                                        <td class="text-center" colspan="2"><b>PROFESSIONAL LICENSE (PRC)</b></td>
                                                        <td class="text-center"><b>Valid Until</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-center" style="width:1%">@countss.</td>
                                                        <td class="text-center">@Prc.ProfName</td>
                                                        <td class="text-center">@Prc.Validity?.ToString("MMM dd, yyyy")</td>
                                                    </tr>
                                                    countss++;
                                                }
                                            </table>
                                        </td>
                                    </tr>
                                </table>

                                <!-- Work Experience -->
                                <table border="1" style="width:100%; margin-top:5px;">
                                    <tr>
                                        <td colspan="5"><b>VII. WORK EXPERIENCE</b> (Limit to 10 year period, start with the most recent employment)</td>
                                    </tr>
                                    <tr>
                                        <td><b>Company Name</b></td>
                                        <td>
                                            <p><b>Address</b></p>
                                            <small>(City/Municipality)</small>
                                        </td>
                                        <td><b>Position</b></td>
                                        <td>
                                            <p><b>Date</b></p>
                                            <small>(mm/yyyy to mm/yyyy)</small>
                                        </td>
                                        <td>
                                            <p><b>Status</b></p>
                                            <small>(Permanent, Contractual, Part-time, Probationary)</small>
                                        </td>
                                    </tr>
                                    @foreach (var Workep in selectedApplicant.ApplicantWorkExperience ?? new List<ApplicantWorkExperience>())
                                    {
                                        <tr>
                                            <td>@Workep.CompanyName</td>
                                            <td>@Workep.CompanyAddress</td>
                                            <td>@Workep.Position</td>
                                            <td>@Workep.InclusiveDateFrom?.ToString("MM/yyyy") to @Workep.InclusiveDateTo?.ToString("MM/yyyy")</td>
                                            <td>@Workep.Status</td>
                                        </tr>
                                    }
                                </table>

                                <!-- Other Skills -->
                                <table border="1" style="width:100%; margin-top:5px;">
                                    <tr>
                                        <td class="p-1"><b>VIII. OTHER SKILLS ACQUIRED WITHOUT FORMAL TRAINING</b></td>
                                    </tr>
                                    <tr>
                                        <td class="p-1">
                                            <ul>
                                                @foreach (var Oth in selectedApplicant.ApplicantOtherSkills ?? new List<ApplicantOtherSkills>())
                                                {
                                                    <li>@Oth.SkillName</li>
                                                }
                                            </ul>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="nsrp-toggle" @onclick="MarkAsInterviewed">Mark as Interviewed?</button>
                        <button class="nsrp-toggle" @onclick="CloseModal">Close</button>
                    </div>
                </div>
            </div>

            <!-- END Modal -->
        }

    </div>
}

@code {
    private AccountAndInformationViewModel? profile;
    private bool isUserLoggedIn = false;
    private bool loaded = false;

    private EmployerDetails? employerDetails;
    private List<EmployerJobPost>? jobPosts;
    private EmployerJobPost? selectedJobPost;

    private string initialBearerToken = "your-bearer-token-here";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;

                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                try
                {
                    var profileResponse = await Http.GetAsync($"api/Applicant/GetApplicantProfile/{userId}");
                    if (profileResponse.IsSuccessStatusCode)
                    {
                        var json = await profileResponse.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<AccountAndInformationViewModel>(json, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true 
                        });

                        var jobResponse = await Http.GetAsync($"api/Employer/GetEstablishmentDataWithUserAccountId/{userId}");
                        if (jobResponse.IsSuccessStatusCode)
                        {
                            var rawJson = await jobResponse.Content.ReadAsStringAsync();
                            var employerData = JsonSerializer.Deserialize<EmployerRegistrationViewModel>(rawJson, new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });

                            if (employerData != null)
                            {
                                employerDetails = employerData.EmployerDetails;
                                jobPosts = employerDetails?.JobPosts ?? new List<EmployerJobPost>();
                            }
                        }
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }

                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }
    // ────────────────────────── helpers ──────────────────────────

    private List<AppliedApplicantViewModel>? applicants;
    private bool isApplicantsLoading;

    private async void SelectJob(EmployerJobPost post)
    {
        if (selectedJobPost?.Id == post.Id) return; // already showing

        selectedJobPost = post;
        currentJobId = post.Id; // <-- set currentJobId here
        applicants = null;
        isApplicantsLoading = true;
        StateHasChanged();

        await LoadApplicantsAsync(post.Id!);
    }

    private async Task LoadApplicantsAsync(string jobId)
    {
        try
        {
            applicants = await Http.GetFromJsonAsync<List<AppliedApplicantViewModel>>
                ($"api/Employer/GetApplicantsByJobPost/{jobId}") ?? new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading applicants: " + ex.Message);
        }
        finally
        {
            isApplicantsLoading = false;
            StateHasChanged();
        }
    }

    <!-- Add Job Post -->
    public bool ReasonExpansion { get; set; }
    public bool ReasonReplaceMent { get; set; }
    public bool ReasonOthers { get; set; }

    private bool showAddJobModal = false;
    private string? errorMessage;
    private EmployerJobPost newJob = new EmployerJobPost
    {
        IsDeleted = false,
        IsVacant = 1,
        ReasonExpansion = false,
        ReasonReplaceMent = false,
        ReasonOthers = false
    };
    private async Task PostAJob()
    {
        // ✅ Validation
        if (string.IsNullOrWhiteSpace(newJob.Description))
        {
            await JS.InvokeVoidAsync("alert", "Job Title is required.");
            return;
        }
        if (string.IsNullOrWhiteSpace(newJob.Description2))
        {
            await JS.InvokeVoidAsync("alert", "Job Description is required.");
            return;
        }
        if (newJob.NumberOfVacancy == null || newJob.NumberOfVacancy <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please specify number of vacancies.");
            return;
        }
        if (newJob.Salary <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please provide expected salary.");
            return;
        }
        if (newJob.AgeFrom == null || newJob.AgeFrom <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please enter Age From.");
            return;
        }
        if (newJob.AgeTo == null || newJob.AgeTo <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please enter Age To.");
            return;
        }

        try
        {
            // ✅ Set the correct foreign key
            if (employerDetails == null)
            {
                await JS.InvokeVoidAsync("alert", "Cannot post job: Employer details not found.");
                return;
            }

            newJob.EmployerDetailsId = employerDetails.Id; // ✅ Use EmployerDetails.Id
            newJob.Id = Guid.NewGuid().ToString();
            newJob.DatePosted = DateTime.Now;
            newJob.Expiry = DateTime.Now.AddDays(30);

            // Ensure default values
            newJob.IsDeleted = false;
            newJob.IsVacant = 0;
            newJob.ReasonExpansion = ReasonExpansion;
            newJob.ReasonReplaceMent = ReasonReplaceMent;
            newJob.ReasonOthers = ReasonOthers;

            var response = await Http.PostAsJsonAsync("api/Employer/AddJobPost", newJob);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Job post submitted successfully!");

                // ✅ Reset the form values
                newJob = new EmployerJobPost
                {
                    IsDeleted = false,
                    IsVacant = 0,
                    ReasonExpansion = false,
                    ReasonReplaceMent = false,
                    ReasonOthers = false,
                    EmployerDetailsId = employerDetails.Id // keep this since it's needed
                };
                StateHasChanged(); // ✅ refresh UI
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to post job: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    // ────────────────────────── Delete Job Post ──────────────────────────
    private async Task ConfirmDelete(string jobPostId, string userId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete this job post?");
        if (confirmed)
        {
            await DeleteJobPost(jobPostId, userId);
        }
    }

    private async Task DeleteJobPost(string jobPostId, string userId)
    {
        var response = await Http.GetAsync(
            $"api/Employer/DeleteEmpJobPost/{jobPostId}/{userId}");

        if (response.IsSuccessStatusCode)
        {
            // Remove from list
            var job = jobPosts.FirstOrDefault(j => j.Id == jobPostId);
            if (job != null) jobPosts.Remove(job);

            selectedJobPost = null; // clear details panel
            StateHasChanged();

            await JS.InvokeVoidAsync("alert", "Job post deleted successfully.");
        }
        else
        {
            var msg = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Failed to delete job post: {msg}");
        }
    }

    // ────────────────────────── Modal ──────────────────────────
    private ApplicantDataViewModel selectedApplicant = new();

    private bool isModalOpen = false;

    private List<Region> Regions = new();
    private List<Province> AllProvinces = new();
    private List<CityMunicipality> AllCities = new();
    private List<Barangay> AllBarangays = new();

    private string? accountId;

    // Filtering Present Address
    private IEnumerable<Province> FilteredProvincesPresent =>
        AllProvinces.Where(p => p.regCode == selectedApplicant.ApplicantInformation.PresentRegion);

    private IEnumerable<CityMunicipality> FilteredCitiesPresent =>
        AllCities.Where(c => c.provCode == selectedApplicant.ApplicantInformation.PresentProvince);

    private IEnumerable<Barangay> FilteredBarangaysPresent =>
        AllBarangays.Where(b => b.citymunCode == selectedApplicant.ApplicantInformation.PresentMunicipalityCity);

    // Filtering Permanent Address
    private IEnumerable<Province> FilteredProvincesPermanent =>
        AllProvinces.Where(p => p.regCode == selectedApplicant.ApplicantInformation.ProvincialRegion);

    private IEnumerable<CityMunicipality> FilteredCitiesPermanent =>
        AllCities.Where(c => c.provCode == selectedApplicant.ApplicantInformation.ProvincialProvince);

    private IEnumerable<Barangay> FilteredBarangaysPermanent =>
        AllBarangays.Where(b => b.citymunCode == selectedApplicant.ApplicantInformation.ProvincialMunicipalityCity);

    private AppliedApplicantViewModel? selectedAppliedApplicant;

    private async Task OpenApplicantModal(AppliedApplicantViewModel applicant)
    {
        if (applicant?.Applicant.AccountId == null)
            return;

        try
        {
            // Fetch the full applicant data
            selectedApplicant = await Http.GetFromJsonAsync<ApplicantDataViewModel>(
                $"api/Employer/ApplicantDataViewModel/{applicant.Applicant.AccountId}"
            ) ?? new ApplicantDataViewModel();

            if (selectedApplicant != null)
            {
                isModalOpen = true;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to load applicant data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading applicant: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Error loading applicant data.");
        }
    }

    private void CloseModal()
    {
        selectedAppliedApplicant = null;
        isModalOpen = false;
    }

    private string activeTab = "frontPage";

    private void OpenTab(string tabId)
    {
        activeTab = tabId;
    }

    private string TabClass(string tabId) => activeTab == tabId ? "tab-content active" : "tab-content";

    // Converts between long timestamp <-> DateTime for binding

    private DateTime? DateOfBirthValueModal
    {
        get
        {
            if (selectedApplicant?.ApplicantInformation == null || selectedApplicant.ApplicantInformation.DateOfBirth == 0)
                return null;

            return DateTimeOffset.FromUnixTimeMilliseconds(selectedApplicant.ApplicantInformation.DateOfBirth).DateTime;
        }
    }

    private async Task MarkAsInterviewed()
    {
        var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");

        if (selectedApplicant == null || selectedApplicant.ApplicantAccount == null)
        {
            await JS.InvokeVoidAsync("alert", "No applicant selected.");
            return;
        }

        var employerId = employerDetails?.Id ?? userId;

        string? applicantAccountId = selectedApplicant.ApplicantAccount.Id
                                     ?? selectedApplicant.ApplicantAccount.AppAccountId?.ToString();

        if (string.IsNullOrEmpty(employerId) || string.IsNullOrEmpty(applicantAccountId))
        {
            await JS.InvokeVoidAsync("alert", "Employer or Applicant ID is missing.");
            return;
        }

        var url = $"api/Employer/SetAsInterviewed/{employerId}/{applicantAccountId}";
        Console.WriteLine($"📡 Calling API: {url}");

        try
        {
            // ✅ Use GET because your API is decorated with [HttpGet]
            var response = await Http.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Applicant marked as interviewed.");
                isModalOpen = false;

                // update UI: either reload list or set flag on selected applicant
                if (applicants != null && selectedApplicant?.ApplicantAccount?.Id != null)
                {
                    var applied = applicants.FirstOrDefault(a => a.Applicant?.AccountId == selectedApplicant.ApplicantAccount.Id);
                    if (applied != null)
                    {
                        applied.IsInterviewed = true;
                    }
                }
                await LoadApplicantsAsync(selectedJobPost!.Id);
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed: {response.StatusCode} - {error}");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            StateHasChanged();
        }
    }

    // your existing modal logic here

    private void HandleRowClick(AppliedApplicantViewModel applicant)
    {
        if (applicant.IsHired)
        {
            // ✅ Go to Hired applicants page
            Navigation.NavigateTo("/pesobeta/HiredApplicants/employer");
        }
        else if (applicant.IsInterviewed)
        {
            // ✅ Go to Interviewed applicants page
            Navigation.NavigateTo("/pesobeta/InterviewedApplicants/employer");
        }
        else
        {
            // ✅ Open modal for non-interviewed applicants
            _ = OpenApplicantModal(applicant); // async modal call
        }
    }

    //  -----------------------------------  Go to Interview  -----------------------------------
    private void GoToInterviewed()
    {
        Navigation.NavigateTo("/pesobeta/InterviewedApplicants/employer");
    }
    //  -----------------------------------  Go to Hired  -----------------------------------
    private void GoToHired()
    {
        Navigation.NavigateTo("/pesobeta/HiredApplicants/employer");
    }
    // -----------------------------------  Schedule an Interview  -----------------------------------
    private AppliedApplicantViewModel? scheduleApplicant;
    private DateTime? scheduleDate { get; set; } = DateTime.Today;
    private bool showScheduleModal = false;
    public bool IsHired { get; set; }

    private void OpenScheduleInterviewModal(AppliedApplicantViewModel applicant)
    {
        scheduleApplicant = applicant;
        scheduleDate = DateTime.Today; // default today
        showScheduleModal = true;
    }

    private void CloseScheduleInterviewModal()
    {
        showScheduleModal = false;
    }

    private async Task SubmitScheduleInterview()
    {
        if (scheduleApplicant == null)
        {
            await JS.InvokeVoidAsync("alert", "No applicant selected for scheduling.");
            return;
        }

        if (scheduleDate == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a schedule date.");
            return;
        }

        var scheduleData = new
        {
            id = Guid.NewGuid().ToString(),
            employerId = employerDetails?.Id,
            applicantId = scheduleApplicant.Applicant?.AccountId,
            dateSchedule = scheduleDate.Value,
            dateCreated = DateTime.UtcNow
        };

        Console.WriteLine($"Posting: {JsonSerializer.Serialize(scheduleData)}");

        var response = await Http.PostAsJsonAsync("api/Employer/CreateScheduleInterview", scheduleData);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Interview scheduled successfully!");
            showScheduleModal = false;
            scheduleApplicant = null;

            // 🔄 Refresh applicants list
            await ReloadApplicants();
            StateHasChanged();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Error scheduling interview: {error}");
        }
    }

    // Helper method for refreshing applicants
    private string? currentJobId;

    private async Task ReloadApplicants()
    {
        isApplicantsLoading = true;
        StateHasChanged(); // show loader

        try
        {
            if (!string.IsNullOrEmpty(currentJobId)) // make sure you keep jobId somewhere in your component
            {
                await LoadApplicantsAsync(currentJobId);
            }
        }
        finally
        {
            isApplicantsLoading = false;
            StateHasChanged(); // refresh UI
        }
    }


    private string scheduleDateString
    {
        get => scheduleDate?.ToString("yyyy-MM-dd") ?? "";
        set
        {
            if (DateTime.TryParse(value, out var dt))
                scheduleDate = dt;
            else
                scheduleDate = null;
        }
    }
    
}
   
