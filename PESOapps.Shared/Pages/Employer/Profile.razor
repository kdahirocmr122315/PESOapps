@page "/Profile/employer"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using webapi_peso.ViewModels
@using webapi_peso.Model
@using System.Text.Json

@if (!isUserLoggedIn)
{

}
else if (profile == null)
{
    <p>Loading. sss..</p>
}
else
{
    <div class="profile-page">
        <!-- Cover Photo -->
        <div class="prof-cover">
            <!-- Profile Picture -->
            <div class="profile-picture position-absolute" style="bottom: -60px; left: 30px;">
                <img src="https://pesoapi.misamisoriental.gov.ph/image/profile_placeholder.png"
                     class="rounded-circle border border-white shadow"
                     style="width: 120px; height: 120px; object-fit: cover;" />
            </div>
        </div>

        <!-- Main Profile Content -->
        <div class="prof-container">
            <div class="prof-flex d-flex justify-content-between align-items-start flex-wrap">
                <div>
                    <h3 class="fw-bold mb-1">
                        @profile.EstablishmentName
                    </h3>
                    <p class="text-muted mb-2">@profile.ContactEmailAddress</p>
                </div>
            </div>

            <!-- Profile Summary Section -->
            <div class="row mt-4">
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Acronym/Abbreviation</p>
                    <p>@profile.AcronymAbbreviation</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Tax Identification Number</p>
                    <p>@profile.TIN</p>
                </div>

                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Employer Type</p>
                    <p>@profile.EmployerType</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Total Work Force</p>
                    <p>@profile.WorkForce</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Line of Business/Industry</p>
                    <p>@profile.LineOfBusiness</p>
                </div>

                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Address</p>
                    <p>@profile.Address</p>
                </div>
            </div>
            <h1>Establishment Contact Details</h1>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Contact Person</p>
                    <p>@profile.ContactPrependName. @profile.ContactFullName</p>
                </div>

                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Position</p>
                    <p>@profile.ContactPosition</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Telephone No.</p>
                    <p>@profile.ContactTelephoneNo</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Mobile No.</p>
                    <p>@FormatMobile(profile.ContactMobileNo)</p>
                </div>
                <div class="col-md-6 mb-3">
                    <p class="mb-1 text-muted">Fax No.</p>
                    <p>@profile.ContactFaxNo</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isUserLoggedIn = false;
    private EmployerDetails? profile;

    private bool loaded = false;
    private string initialBearerToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE4Mjc5ODUzMjMsImlzcyI6InBtaXMiLCJhdWQiOiJtaXNhbWlzIG9yaWVudGFsIn0.TNAG-ODpEb_gfDf_sRfvK5wFvloBU_pcd9WKY6ajQfk";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            loaded = true;

            // 1️⃣ Get auth info from localStorage
            var userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (!string.IsNullOrWhiteSpace(userId) && isLoggedIn == "true")
            {
                isUserLoggedIn = true;

                // 2️⃣ Attach JWT to every request
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", initialBearerToken);

                try
                {
                    /* ─────────────────────────────────────────
                       A. Fetch Employer profile (your old call)
                       ───────────────────────────────────────── */
                    var profileResponse =
                        await Http.GetAsync($"http://localhost:5167/api/Employer/GetEmployerDetailsByEmail/{userId}");

                    if (profileResponse.IsSuccessStatusCode)
                    {
                        var json = await profileResponse.Content.ReadAsStringAsync();
                        profile = JsonSerializer.Deserialize<EmployerDetails>(
                            json,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }
                    else
                    {
                        Console.WriteLine($"Profile call failed: {profileResponse.StatusCode}");
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error fetching data: " + ex.Message);
                }

                StateHasChanged(); // Refresh the UI once we have data
            }
            else
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
        }
    }

    private string FormatMobile(string? raw)
    {
        if (string.IsNullOrWhiteSpace(raw))
            return "-";

        var digits = new string(raw.Where(char.IsDigit).ToArray());

        // Remove leading zero if present
        if (digits.StartsWith("0"))
            digits = digits[1..];

        return $"+63 {digits}";
    }
}
