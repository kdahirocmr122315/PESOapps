@page "/UpdateEmployer/employer"
@using PESOapps.Shared.Address
@using webapi_peso.Model
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AddressService AddressService

<PageTitle>Update Employer Details</PageTitle>

@if (!isUserLoggedIn)
{
    <p>You are not logged in. Redirecting...</p>
}
else if (employer == null || !loaded)
{
    <p>Loading...</p>
}
else
{
    <div class="nsrp-container">

        <div class="nsrp-header">
            <button class="nsrp-toggle" @onclick="ToggleEdit">
                @(isEditing ? "Disable Update" : "Enable Update")
            </button>
        </div>

        <div class="nsrp-section">
            <h4>Establishment Details</h4>
            <div class="nsrp-grid">
                <div>
                    <label>Email</label>
                    <input class="nsrp-input" @bind="employer.ContactEmailAddress" disabled />
                </div>
                <div>
                    <label>Password</label>
                    <div style="display:flex; align-items:center; gap:8px; position:relative;">
                        <input type="@passwordInputType"
                               class="nsrp-input"
                               @bind="employer.AcronymAbbreviation"
                               disabled="@(!isEditing)" />

                        <button style="height: 34px;" type="button"
                                class="showpass"
                                @onclick="TogglePassword"
                                disabled="@(!isEditing)">
                            @(showPassword ? "🙈" : "👁")
                        </button>
                    </div>
                </div>
                <div>
                    <label>Establishment Name</label>
                    <input class="nsrp-input" @bind="employer.EstablishmentName" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Acronym/Abbreviation</label>
                    <input class="nsrp-input" @bind="employer.AcronymAbbreviation" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Tax Identification Number (TIN)</label>
                    <input class="nsrp-input" @bind="employer.TIN" disabled="@(!isEditing)" />
                </div>
            </div>

            <h4>Employer Type & Workforce</h4>
            <div class="nsrp-grid">
                <div>
                    <label>Employer Type</label>
                    <select class="nsrp-input" @bind="employer.EmployerType" disabled="@(!isEditing)">
                        <option value="">Select</option>
                        <option value="Government">Government</option>
                        <option value="Recruitment & Placement Agency (Local)">Recruitment & Placement Agency (Local)</option>
                        <option value="DO 174-17, Subcontractor">DO 174-17, Subcontractor</option>
                        <option value="Private">Private</option>
                        <option value="Licensed Recruitment Agency (Overseas)">Licensed Recruitment Agency (Overseas)</option>
                    </select>
                </div>
                <div>
                    <label>Total Workforce</label>
                    <select class="nsrp-input" @bind="employer.WorkForce" disabled="@(!isEditing)">
                        <option value="">Select</option>
                        <option value="Micro (1-9)">Micro (1-9)</option>
                        <option value="Small (10-99)">Small (10-99)</option>
                        <option value="Medium (100-199)">Medium (100-199)</option>
                        <option value="Large (200 and up)">Large (200 and up)</option>
                    </select>
                </div>
                <div>
                    <label>Line of Business</label>
                    <input class="nsrp-input" @bind="employer.LineOfBusiness" disabled="@(!isEditing)" />
                </div>
            </div>

            <h4>Address</h4>
            <div class="nsrp-grid">
                <!-- Region -->
                <div>
                    <label>Region</label>
                    <select class="nsrp-input" @bind="employer.Region" disabled="@(!isEditing)">
                        <option value="">Select Region</option>
                        @foreach (var r in Regions)
                        {
                            <option value="@r.RegCode">@r.RegDesc</option>
                        }
                    </select>
                </div>

                <!-- Province -->
                <div>
                    <label>Province</label>
                    <select class="nsrp-input" @bind="employer.Province" disabled="@(!isEditing)">
                        <option value="">Select Province</option>
                        @foreach (var p in FilteredProvinces)
                        {
                            <option value="@p.provCode">@p.provDesc</option>
                        }
                    </select>
                </div>

                <!-- City / Municipality -->
                <div>
                    <label>City / Municipality</label>
                    <select class="nsrp-input" @bind="employer.CityMunicipality" disabled="@(!isEditing)">
                        <option value="">Select City / Municipality</option>
                        @foreach (var c in FilteredCities)
                        {
                            <option value="@c.citymunCode">@c.citymunDesc</option>
                        }
                    </select>
                </div>

                <!-- Barangay -->
                <div>
                    <label>Barangay</label>
                    <select class="nsrp-input" @bind="employer.Barangay" disabled="@(!isEditing)">
                        <option value="">Select Barangay</option>
                        @foreach (var b in FilteredBarangays)
                        {
                            <option value="@b.brgyCode">@b.brgyDesc</option>
                        }
                    </select>
                </div>

                <!-- Street / Address -->
                <div>
                    <label>Street</label>
                    <input class="nsrp-input" @bind="employer.Address" disabled="@(!isEditing)" />
                </div>
            </div>



            <h4>Contact Person</h4>
            <div class="nsrp-grid">
                <div>
                    <label>Prefix</label>
                    <input class="nsrp-input" @bind="employer.ContactPrependName" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Full Name</label>
                    <input class="nsrp-input" @bind="employer.ContactFullName" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Position</label>
                    <input class="nsrp-input" @bind="employer.ContactPosition" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Telephone No.</label>
                    <input class="nsrp-input" @bind="employer.ContactTelephoneNo" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Mobile No.</label>
                    <input class="nsrp-input" @bind="employer.ContactMobileNo" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Fax No.</label>
                    <input class="nsrp-input" @bind="employer.ContactFaxNo" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Email</label>
                    <input class="nsrp-input" @bind="employer.ContactEmailAddress" disabled="@(!isEditing)" />
                </div>
            </div>
        </div>
        <div class="nsrp-footer">
            <button class="nsrp-submit" disabled="@(!isEditing)" @onclick="SaveEmployer">Update</button>
        </div>
    </div>
}

@code {
    private bool isUserLoggedIn = false;
    private EmployerDetails? employer;
    private bool isEditing = false;
    private string userId = string.Empty;
    private bool loaded = false;


    private List<Region> Regions = new();
    private List<Province> AllProvinces = new();
    private List<CityMunicipality> AllCities = new();
    private List<Barangay> AllBarangays = new();

    // Filtered lists based on selected parent
    private IEnumerable<Province> FilteredProvinces =>
        AllProvinces?.Where(p => p.regCode == employer?.Region) ?? Enumerable.Empty<Province>();

    private IEnumerable<CityMunicipality> FilteredCities =>
        AllCities?.Where(c => c.provCode == employer?.Province) ?? Enumerable.Empty<CityMunicipality>();

    private IEnumerable<Barangay> FilteredBarangays =>
        AllBarangays?.Where(b => b.citymunCode == employer?.CityMunicipality) ?? Enumerable.Empty<Barangay>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get user info from localStorage
                userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
                var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

                if (string.IsNullOrEmpty(userId) || isLoggedIn != "true")
                {
                    await JS.InvokeVoidAsync("alert", "You are not logged in!");
                    Navigation.NavigateTo("/login");
                    return;
                }

                isUserLoggedIn = true;

                Regions = await AddressService.GetRegionsAsync();
                AllProvinces = await AddressService.GetProvincesAsync();
                AllCities = await AddressService.GetCitiesAsync();
                AllBarangays = await AddressService.GetBarangaysAsync();

                if (!string.IsNullOrEmpty(token))
                {
                    Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                }

                await LoadEmployer();
                loaded = true;

                StateHasChanged(); // re-render after data is loaded
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error initializing page: {ex.Message}");
            }
        }
    }


    private async Task LoadEmployer()
    {
        try
        {
            employer = await Http.GetFromJsonAsync<EmployerDetails>($"api/Employer/GetEmployerDetailsByEmail/{userId}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error fetching employer details: {ex.Message}");
        }
    }

    private void ToggleEdit()
    {
        isEditing = !isEditing;
        if (!isEditing)
        {
            _ = LoadEmployer();
        }
    }

    private async Task SaveEmployer()
    {
        try
        {
            if (employer == null) return;

            // Wrap employer in the expected model
            var request = new
            {
                EmployerDetails = employer,
                ListOfAttachments = new List<object>() // send empty if you don't need attachments
            };

            var response = await Http.PostAsJsonAsync("api/Employer/UpdateEmployer", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Employer updated successfully!");
                isEditing = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to update employer: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error updating employer: {ex.Message}");
        }
    }
    // ********************************************************************** Show password **********************************************************************

    private bool showPassword = false;
    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePassword()
    {
        showPassword = !showPassword;
    }



}
