@page "/UpdateMunicipality/municipality"
@using PESOapps.Shared.Address
@using webapi_peso.Model
@using webapi_peso.ViewModels
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AddressService AddressService

<PageTitle>Update Profile</PageTitle>

@if (!isUserLoggedIn)
{
    <p>You are not logged in. Redirecting...</p>
}
else if (manager == null || !loaded)
{
    <p>Loading...</p>
}
else
{
    <div class="nsrp-container">

        <!-- Change password modal -->
        @if (showChangePasswordModal)
        {
            <div class="changepassword-modal-overlay">
                <div class="changepassword-modal">
                    <div class="changepassword-header">
                        <h3>Change Password</h3>
                        <button class="changepassword-close" @onclick="CloseChangePasswordModal">×</button>
                    </div>

                    <div class="changepassword-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="changepassword-error">@errorMessage</div>
                        }

                        <div>
                            <label>Current Password</label>
                            <div style="display:flex; align-items:center; gap:8px; position:relative;">
                                <input type="@passwordInputType" class="changepassword-input" @bind="currentPassword" />
                                <button type="button" class="showpass" @onclick="TogglePassword">
                                    @(showPassword ? "🙈" : "👁")
                                </button>
                            </div>
                        </div>
                        <div>
                            <label>New Password</label>
                            <div style="display:flex; align-items:center; gap:8px; position:relative;">
                                <input type="@passwordInputType1" class="changepassword-input" @bind="newPassword" />
                                <button type="button" class="showpass" @onclick="TogglePassword1">
                                    @(showPassword1 ? "🙈" : "👁")
                                </button>
                            </div>
                        </div>
                        <div>
                            <label>Confirm New Password</label>
                            <div style="display:flex; align-items:center; gap:8px; position:relative;">
                                <input type="@passwordInputType2" class="changepassword-input" @bind="repeatPassword" />
                                <button type="button" class="showpass" @onclick="TogglePassword2">
                                    @(showPassword2 ? "🙈" : "👁")
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="changepassword-footer">
                        <button class="changepassword-submit" @onclick="SubmitChangePassword">Submit</button>
                        <button class="changepassword-cancel" @onclick="CloseChangePasswordModal">Cancel</button>
                    </div>
                </div>
            </div>
        }

        <div class="nsrp-header">
            <button class="nsrp-toggle" @onclick="OpenChangePasswordModal">Change Password</button>
            <button class="nsrp-toggle" @onclick="ToggleEdit">
                @(isEditing ? "Disable Update" : "Enable Update")
            </button>
        </div>

        <div class="nsrp-section">
            <h4>Account Information</h4>
            <div class="nsrp-grid">
                <div>
                    <label>Full Name</label>
                    <input class="nsrp-input" @bind="manager.UserAccount.Name" disabled="@(!isEditing)" />
                </div>
                <div>
                    <label>Email</label>
                    <input class="nsrp-input" @bind="manager.UserAccount.Email" disabled />
                </div>
            </div>

            <h4>Address Details</h4>
            <div class="nsrp-grid">
                <!-- Province -->
                <div>
                    <label>Province</label>
                    <select class="nsrp-input" @bind="manager.UserInformation.ProvCode" disabled="@(!isEditing)">
                        <option value="">Select Province</option>
                        @foreach (var p in AllProvinces)
                        {
                            <option value="@p.provCode">@p.provDesc</option>
                        }
                    </select>
                </div>
                <!-- City/Municipality -->
                <div>
                    <label>City / Municipality</label>
                    <select class="nsrp-input" @bind="manager.UserInformation.CityCode" disabled="@(!isEditing)">
                        <option value="">Select City / Municipality</option>
                        @foreach (var c in FilteredCities)
                        {
                            <option value="@c.citymunCode">@c.citymunDesc</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="nsrp-footer">
            <button class="nsrp-submit" disabled="@(!isEditing)" @onclick="SaveManager">Update</button>
        </div>
    </div>
}

@code {
    private bool isUserLoggedIn = false;
    private PESOManagerAccountViewModel? manager;
    private bool isEditing = false;
    private string userId = string.Empty;
    private bool loaded = false;

    private List<Province> AllProvinces = new();
    private List<CityMunicipality> AllCities = new();

    private IEnumerable<CityMunicipality> FilteredCities =>
        AllCities?.Where(c => c.provCode == manager?.UserInformation.ProvCode) ?? Enumerable.Empty<CityMunicipality>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // ✅ Get values from localStorage
            userId = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
            var isLoggedIn = await JS.InvokeAsync<string>("localStorage.getItem", "IsLoggedIn");

            if (string.IsNullOrEmpty(userId) || isLoggedIn != "true")
            {
                await JS.InvokeVoidAsync("alert", "You are not logged in!");
                Navigation.NavigateTo("/login");
                return;
            }

            isUserLoggedIn = true;

            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
            }

            // ✅ Load provinces, cities, and manager in parallel
            var provincesTask = AddressService.GetProvincesAsync();
            var citiesTask = AddressService.GetCitiesAsync();
            var managerTask = Http.GetFromJsonAsync<PESOManagerAccountViewModel>(
                $"api/Manager/GetPESOManagerAccount/{userId}");

            await Task.WhenAll(provincesTask, citiesTask, managerTask);

            AllProvinces = provincesTask.Result;
            AllCities = citiesTask.Result;
            manager = managerTask.Result;

            loaded = true;

            StateHasChanged(); // force re-render after async load
        }
    }



    private async Task LoadManager()
    {
        manager = await Http.GetFromJsonAsync<PESOManagerAccountViewModel>(
            $"api/Manager/GetPESOManagerAccount/{userId}");
    }

    private void ToggleEdit()
    {
        isEditing = !isEditing;
        if (!isEditing)
        {
            _ = LoadManager();
        }
    }

    private async Task SaveManager()
    {
        if (manager == null) return;

        var response = await Http.PostAsJsonAsync("api/Manager/UpdatePESOManagerAccount", manager);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Profile updated successfully!");
            isEditing = false;
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Failed to update profile: {error}");
        }
    }

    // ===================== Change Password =====================
    private bool showChangePasswordModal = false;
    private string currentPassword = string.Empty;
    private string newPassword = string.Empty;
    private string repeatPassword = string.Empty;
    private string errorMessage = string.Empty;

    private bool showPassword = false;
    private string passwordInputType => showPassword ? "text" : "password";

    private bool showPassword1 = false;
    private string passwordInputType1 => showPassword1 ? "text" : "password";

    private bool showPassword2 = false;
    private string passwordInputType2 => showPassword2 ? "text" : "password";

    private void TogglePassword() => showPassword = !showPassword;
    private void TogglePassword1() => showPassword1 = !showPassword1;
    private void TogglePassword2() => showPassword2 = !showPassword2;

    private void OpenChangePasswordModal()
    {
        showChangePasswordModal = true;
        errorMessage = string.Empty;
    }

    private void CloseChangePasswordModal()
    {
        showChangePasswordModal = false;
        currentPassword = newPassword = repeatPassword = string.Empty;
        errorMessage = string.Empty;
        showPassword = false;
    }

    private async Task SubmitChangePassword()
    {
        if (newPassword != repeatPassword)
        {
            errorMessage = "New password and Confirm password do not match.";
            return;
        }

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");

        var payload = new
        {
            id = userId,
            currentPassword,
            newPassword,
            repeatPassword
        };

        var request = new HttpRequestMessage(HttpMethod.Post, "api/Applicant/ChangeUserPassword")
        {
            Content = JsonContent.Create(payload)
        };

        if (!string.IsNullOrWhiteSpace(token))
        {
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Password changed successfully!");
            CloseChangePasswordModal();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            errorMessage = string.IsNullOrWhiteSpace(error) ? "Password change failed." : error;
        }
    }
}
