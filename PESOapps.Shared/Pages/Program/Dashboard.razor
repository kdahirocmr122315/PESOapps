@page "/dashboard"
@using Microsoft.AspNetCore.Components.ProtectedBrowserStorage
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage

@if (!isUserLoggedIn)
{
    <p>Redirecting to login...</p>
}
else
{
    <div class="form-cont dashb">
        <div class="buts lo">
            <button class="btn" @onclick="Logout">Logout</button>
        </div>
        <div class="buts ex">
            <button class="btn" @onclick="DownloadExcel">Export to Excel</button>
        </div>
        <h3>Verified Tupad List</h3>
        <div class="table-scroll">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Verification</th>
                        <th>Name</th>
                        <th>Birthdate</th>
                        <th>Address</th>
                        <th>Type Of ID</th>
                        <th>ID Number</th>
                        <th>Contact No.</th>
                        <th>E Payment</th>
                        <th>Type Of Beneficiary</th>
                        <th>Occupation</th>
                        <th>Sex</th>
                        <th>Civil Status</th>
                        <th>Age</th>
                        <th>Average Income</th>
                        <th>Dependent</th>
                        <th>Interest Wage</th>
                        <th>Skills</th>
                    </tr>
                </thead>
                <tbody>
                    @if (VerifiedList != null)
                    {
                        int count = 1; // Start ID from 1
                        @foreach (var item in VerifiedList)
                        {
                            <tr>
                                <td class="center-align">@count</td>
                                <td>
                                    <button class="btn btn-warning" @onclick="() => ChangeVerificationStatus(item.ID, false)">
                                        Set as Unverified
                                    </button>
                                </td>
                                <td class="nowrap center-align">@item.Lastname, @item.Firstname @item.MiddleName @item.ExtensionName</td>
                                <td>@(DateTime.TryParse(item.Birthday, out var birthDate) ? birthDate.ToString("yyyy/MM/dd") : item.Birthday)</td>
                                <td>@item.Barangay, @item.Municipality, @item.Province, District @item.District</td>
                                <td>@item.IDType</td>
                                <td>@item.IDNumber</td>
                                <td>@item.ContactNo</td>
                                <td>@item.Epayment</td>
                                <td>@item.TypeOfBenef</td>
                                <td>@item.Occupation</td>
                                <td class="center-align">@item.Sex</td>
                                <td class="center-align">@item.CivilStatus</td>
                                <td class="center-align">@item.Age</td>
                                <td>@item.AverageIncome</td>
                                <td>@item.Dependent</td>
                                <td>@item.InterestWage</td>
                                <td>@item.SkillsTraining</td>
                            </tr>
                            count++;
                        }
                    }

                </tbody>
            </table>
        </div>
        <h3>Unverified Tupad List</h3>
        <div class="table-scroll">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Verification</th>
                        <th>Delete</th>
                        <th>Name</th>
                        <th>Birthdate</th>
                        <th>Address</th>
                        <th>Type Of ID</th>
                        <th>ID Number</th>
                        <th>Contact No.</th>
                        <th>E Payment</th>
                        <th>Type Of Beneficiary</th>
                        <th>Occupation</th>
                        <th>Sex</th>
                        <th>Civil Status</th>
                        <th>Age</th>
                        <th>Average Income</th>
                        <th>Dependent</th>
                        <th>Interest Wage</th>
                        <th>Skills</th>
                    </tr>
                </thead>
                <tbody>
                    @if (UnverifiedList != null)
                    {
                        int count = 1;
                        @foreach (var item in UnverifiedList)
                        {
                            <tr>
                                <td class="center-align">@count</td>
                                <td>
                                    <button class="btn btn-success" @onclick="() => ChangeVerificationStatus(item.ID, true)">
                                        Set as Verified
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => ConfirmDelete(item.ID)">
                                        Delete
                                    </button>
                                </td>
                                <td class="nowrap center-align">@item.Lastname , @item.Firstname @item.MiddleName @item.ExtensionName</td>
                                <td>@(DateTime.TryParse(item.Birthday, out var birthDate) ? birthDate.ToString("yyyy/MM/dd") : item.Birthday)</td>
                                <td>@item.Barangay, @item.Municipality, @item.Province ,District @item.District</td>
                                <td>@item.IDType</td>
                                <td>@item.IDNumber</td>
                                <td>@item.ContactNo</td>
                                <td>@item.Epayment</td>
                                <td>@item.TypeOfBenef</td>

                                <td>@item.Occupation</td>
                                <td class="center-align">@item.Sex</td>
                                <td class="center-align">@item.CivilStatus</td>
                                <td class="center-align">@item.Age</td>
                                <td>@item.AverageIncome</td>
                                <td>@item.Dependent</td>
                                <td>@item.InterestWage</td>
                                <td>@item.SkillsTraining</td>
                            </tr>
                            count++;
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@inject HttpClient Http
@inject IJSRuntime JS
@inject IJSRuntime JSS
@inject ExcelService ExcelService

@using System.Net.Http.Headers
@using System.IO;
@using System.Threading.Tasks;
@using PESOapps.Shared.Services
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@using Microsoft.JSInterop;
    using PESOapps.Shared.Services;

@code {
    private bool isUserLoggedIn = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var sessionResult = await SessionStorage.GetAsync<bool>("IsLoggedIn");

            if (!sessionResult.Success || !sessionResult.Value)
            {
                Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
            }
            else
            {
                isUserLoggedIn = true;
                StateHasChanged(); // Ensures UI updates after session check
            }
        }
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("IsLoggedIn");
        Navigation.NavigateTo("/pesobeta/Login", forceLoad: true);
    }
    private List<TupadModel> VerifiedList = new();
    private List<TupadModel> UnverifiedList = new();
    private string Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE4Mjc5ODUzMjMsImlzcyI6InBtaXMiLCJhdWQiOiJtaXNhbWlzIG9yaWVudGFsIn0.TNAG-ODpEb_gfDf_sRfvK5wFvloBU_pcd9WKY6ajQfk";

    protected override async Task OnInitializedAsync()
    {
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5167/Api/Tupad/verified");
        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);

        var response = await Http.SendAsync(requestMessage);

        if (response.IsSuccessStatusCode)
        {
            beneficiaries = await response.Content.ReadFromJsonAsync<List<TupadBeneficiary>>();
            await LoadData();
        }
        else
        {
            Console.WriteLine("Error fetching data: " + response.StatusCode);
        }
    }


    private async Task LoadData()
    {
        try
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5167/Api/Tupad/verified");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);
            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                VerifiedList = await response.Content.ReadFromJsonAsync<List<TupadModel>>();
            }

            requestMessage = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5167/Api/Tupad/unverified");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);
            response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                UnverifiedList = await response.Content.ReadFromJsonAsync<List<TupadModel>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task ChangeVerificationStatus(int id, bool isVerified)
    {
        try
        {
            var updateData = new { Verification = isVerified ? "Yes" : "No" };
            var requestMessage = new HttpRequestMessage(HttpMethod.Put, $"http://localhost:5167/Api/Tupad/{id}")
                {
                    Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(updateData), System.Text.Encoding.UTF8, "application/json")
                };
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                await LoadData(); // Refresh the data after update
            }
            else
            {
                Console.WriteLine($"Failed to update verification status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating verification status: {ex.Message}");
        }
    }

    private class TupadModel
    {
        public int ID { get; set; }

        public string? Firstname { get; set; }
        public string? MiddleName { get; set; }
        public string? Lastname { get; set; }
        public string? ExtensionName { get; set; }

        public string? Birthday { get; set; }

        public string? Barangay { get; set; }
        public string? Municipality { get; set; }
        public string? Province { get; set; }
        public string? District { get; set; }

        public string? IDType { get; set; }
        public string? IDNumber { get; set; }
        public string? ContactNo { get; set; }
        public string? Epayment { get; set; }
        public string? TypeOfBenef { get; set; }
        public string? Occupation { get; set; }
        public string? Sex { get; set; }
        public string? CivilStatus { get; set; }
        public string? Age { get; set; }
        public string? AverageIncome { get; set; }
        public string? Dependent { get; set; }
        public string? InterestWage { get; set; }
        public string? SkillsTraining { get; set; }
        public string? Verification { get; set; }
   
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?");
        if (confirm)
        {
            await DeleteRecord(id);
        }
    }

    private async Task DeleteRecord(int id)
    {
        try
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, $"http://localhost:5167/Api/Tupad/{id}");
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);

            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                await LoadData(); // Refresh data after deletion
            }
            else
            {
                Console.WriteLine($"Failed to delete record: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting record: {ex.Message}");
        }
    }

    private List<TupadBeneficiary> beneficiaries = new();


    private async Task DownloadExcel()
    {
        if (beneficiaries == null || beneficiaries.Count == 0)
        {
            Console.WriteLine("No data available!");
            return;
        }

        var fileContent = await ExcelService.GenerateExcelAsync(beneficiaries);
        var fileName = "TUPAD_Beneficiaries.xlsx";
        await JS.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(fileContent));
    }
}