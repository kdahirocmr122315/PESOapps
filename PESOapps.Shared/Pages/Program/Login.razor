@page "/Login"
@using webapi_peso.Model
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>

<div class="login-containers">
    <div class="login-cards">
        <h2>Hello!</h2>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="error-message">@Message</div>
        }

        <div class="input-groups logs">
            <input class="loginput" type="text" @bind="username" placeholder="" />
            <label>Email</label>
        </div>

        <div class="input-groups logs" style="position: relative;">
            <input class="loginput" type="@passwordInputType" @bind="password" placeholder="" style="padding-right: 35px;" />
            <button type="button" class="showpass" @onclick="TogglePasswordVisibility">
                @(passwordInputType == "password" ? "👁" : "🙈")
            </button>
            <label>Password</label>
        </div>

        <button @onclick="LoginUser">Login</button>
    </div>
</div>

@code {
    private string? username { get; set; }
    private string? password { get; set; }
    private string? Message { get; set; }

    private string apiUrl2 = "https://portal.misamisoriental.gov.ph/peso2api/Log/User";

    private string apiUrl = "http://localhost:5167/Log/User";

    // ✅ Initial token required by your API
    private string initialBearerToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE4Mjc5ODUzMjMsImlzcyI6InBtaXMiLCJhdWQiOiJtaXNhbWlzIG9yaWVudGFsIn0.TNAG-ODpEb_gfDf_sRfvK5wFvloBU_pcd9WKY6ajQfk";

    private string passwordInputType = "password";

    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == "password" ? "text" : "password";
    }

    private async Task LoginUser()
    {
        try
        {
            // 🔎 Debug log of credentials (to confirm before sending)
            Console.WriteLine($"📤 Sending Login Request -> Email: {username}, Password: {password}");

            var request = new HttpRequestMessage(HttpMethod.Post, apiUrl)
            {
                Content = new StringContent(
                    $"{{\"email\":\"{username?.Trim()}\", \"password\":\"{password?.Trim()}\"}}",
                    System.Text.Encoding.UTF8,
                    "application/json")
            };

            // Add required Bearer token for login endpoint
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", initialBearerToken);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                var user = System.Text.Json.JsonSerializer.Deserialize<LoginResponse>(json,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (user != null)
                {
                    // ✅ Store login data in localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "UserId", user.Id);
                    await JS.InvokeVoidAsync("localStorage.setItem", "UserType", user.UserType.ToString());
                    await JS.InvokeVoidAsync("localStorage.setItem", "Token", user.Token);
                    await JS.InvokeVoidAsync("localStorage.setItem", "IsLoggedIn", "true");

                    // Redirect based on UserType
                    switch (user.UserType)
                    {
                        case 0: // Employer
                            Navigation.NavigateTo("/pesobeta/Profile/employer");
                            break;
                        case 1: // PESO Managers Capitol
                        case 2: // Super Admin
                        case 3: // Applicant
                            Navigation.NavigateTo("/pesobeta/Profile/dash");
                            break;
                        case 4: // PESO Managers Municipality
                            Navigation.NavigateTo("/pesobeta/Profile/municipality");
                            break;
                        default:
                            Message = "Unknown user type.";
                            break;
                    }
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Message = "Invalid username or password.";
            }
            else
            {
                Message = $"Server error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }

    public class LoginResponse
    {
        public string? Id { get; set; }
        public int UserType { get; set; }
        public string? Token { get; set; }
    }
}
