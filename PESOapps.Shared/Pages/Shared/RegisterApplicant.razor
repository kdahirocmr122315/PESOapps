@page "/Jobseeker"
@using PESOapps.Shared.Address
@using System.Net.Http.Headers
@using webapi_peso.Model
@using webapi_peso.ViewModels
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AddressService AddressService
@using System.Text.Json

<PageTitle>Registration</PageTitle>
<div class="nsrp-container registrations-container">
    <!-- END Modal -->
      @if (showConsentSection)
    {
        <h3 class="text-center text-success">AUTHORIZATION/CONSENT</h3>

        <div class="border rounded p-4 my-3 shadow-sm bg-white">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="consent1" @bind="Consent1" />
                <label class="form-check-label" for="consent1">
                    I understand that all data/information that I will provide in the PESO MisOr Website are true to the best of my knowledge.
                </label>
            </div>

            <div class="form-check mt-3">
                <input class="form-check-input" type="checkbox" id="consent2" @bind="Consent2" />
                <label class="form-check-label" for="consent2">
                    I authorize PESO to include my profile in the PESO MisOr Website and use my personal information for employment facilitation in accordance with R.A. #10173 of 2012 (Data Privacy Act).
                </label>
            </div>

            <div class="form-check mt-3">
                <input class="form-check-input" type="checkbox" id="consent3" @bind="Consent3" />
                <label class="form-check-label" for="consent3">
                    I am aware that PESO is not obligated to seek employment on my behalf.
                </label>
            </div>

            <div class="alert alert-danger mt-4">
                <i class="bi bi-exclamation-circle"></i>
                We value and protect your personal information and the same shall be stored in the database/compendium of jobseekers accessible only to PESO and our partner-employment providers, which shall be used solely for employment facilitation purposes.
            </div>

            <div class="text-end mt-3">
                <button class="nsrp-toggle bg-red" @onclick="Cancel">Cancel</button>
                <button class="nsrp-toggle" @onclick="Next" disabled="@(!AllConsentsChecked)">Next</button>
            </div>
        </div>
    }
    @if (showRegistrationForm)
    {

        <EditForm Model="@applicant" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
            <!-- Tab Navigation -->
            <div class="nsrp-carousel">
                <button type="button" class="carousel-arrow left" onclick="scrollTabs(-200)">&#10094;</button>

                <ul class="nsrp-tabs">
                    <li>
                        <button type="button"
                                @ref="btnPersonal"
                                @onclick='@(async () => await SelectAndCenter("personal", btnPersonal))'
                                class='@(activeTab == "personal" ? "nsrp-tab active" : "nsrp-tab")'>
                            Personal Info
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnJobpref"
                                @onclick='@(async () => await SelectAndCenter("jobpref", btnJobpref))'
                                class='@(activeTab == "jobpref" ? "nsrp-tab active" : "nsrp-tab")'>
                            Job Preference
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnLanguage"
                                @onclick='@(async () => await SelectAndCenter("language", btnLanguage))'
                                class='@(activeTab == "language" ? "nsrp-tab active" : "nsrp-tab")'>
                            Language or Dialect Proficiency
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnEducation"
                                @onclick='@(async () => await SelectAndCenter("education", btnEducation))'
                                class='@(activeTab == "education" ? "nsrp-tab active" : "nsrp-tab")'>
                            Education Background
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnTechnical"
                                @onclick='@(async () => await SelectAndCenter("technical", btnTechnical))'
                                class='@(activeTab == "technical" ? "nsrp-tab active" : "nsrp-tab")'>
                            Technical/Vocational and Other Training
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnEligibility"
                                @onclick='@(async () => await SelectAndCenter("eligibility", btnEligibility))'
                                class='@(activeTab == "eligibility" ? "nsrp-tab active" : "nsrp-tab")'>
                            Eligibility or Professional License
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnWork"
                                @onclick='@(async () => await SelectAndCenter("Work", btnWork))'
                                class='@(activeTab == "Work" ? "nsrp-tab active" : "nsrp-tab")'>
                            Work Experience
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                @ref="btnOther"
                                @onclick='@(async () => await SelectAndCenter("Other", btnOther))'
                                class='@(activeTab == "Other" ? "nsrp-tab active" : "nsrp-tab")'>
                            Other Skills Acquired
                        </button>
                    </li>
                </ul>

                <button type="button" class="carousel-arrow right" onclick="scrollTabs(200)">&#10095;</button>
            </div>


            <!-- Tab Content -->
            <div class="nsrp-content">
                @if (activeTab == "personal")
                {
                    <div class="nsrp-section">
                        <h4>Personal Information</h4>
                        <div class="nsrp-grid">
                            <div>
                                <label>Email<span class="text-danger">*</span></label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.Email" />
                            </div>
                            <div>
                                <label>First Name<span class="text-danger">*</span></label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.FirstName" />
                            </div>
                            <div>
                                <label>Middle Name</label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.MiddleName" />
                            </div>
                            <div>
                                <label>Last Name<span class="text-danger">*</span></label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.SurName" />
                            </div>
                            <div>
                                <label>Suffix</label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.Suffix" />
                            </div>
                            <div>
                                <label>Gender<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.Gender">
                                    <option value="">Select</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div>
                                <label>Religion</label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.Religion" />
                            </div>
                            <div>
                                <label>Date of Birth<span class="text-danger">*</span></label>
                                <input id="DateOfBirth"
                                       type="date"
                                       class="jf-fromto nsrp-input"
                                       @bind="DateOfBirthValue"
                                       max="@DateTime.Now.ToString("yyyy-MM-dd")" 
                                       placeholder="Select Date"/>
                            </div>
                            <div>
                                <label>Place of Birth<span class="text-danger">*</span></label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.PlaceOfBirth" />
                            </div>
                            <div>
                                <label>Civil Status<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.CivilStatus">
                                    <option value="">Select</option>
                                    <option value="Single">Single</option>
                                    <option value="Married">Married</option>
                                    <option value="Widowed">Widowed</option>
                                    <option value="Separated">Separated</option>
                                </select>
                            </div>
                        </div>

                        <h4>Present Address</h4>
                        <div class="nsrp-grid">
                            <div>
                                <label>Region<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.PresentRegion">
                                    <option value="">Select</option>
                                    @foreach (var r in Regions)
                                    {
                                        <option value="@r.RegCode">@r.RegDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Province<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.PresentProvince">
                                    <option value="">Select</option>
                                    @foreach (var p in FilteredProvincesPresent)
                                    {
                                        <option value="@p.provCode">@p.provDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>City/Municipality<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.PresentMunicipalityCity">
                                    <option value="">Select</option>
                                    @foreach (var c in FilteredCitiesPresent)
                                    {
                                        <option value="@c.citymunCode">@c.citymunDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Barangay<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.PresentBarangay">
                                    <option value="">Select</option>
                                    @foreach (var b in FilteredBarangaysPresent)
                                    {
                                        <option value="@b.brgyCode">@b.brgyDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Street</label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.PresentHouseNoOrStreetVillage" />
                            </div>
                        </div>

                        <h4>Permanent Address</h4>
                        <div class="nsrp-grid">
                            <div>
                                <label>Region<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.ProvincialRegion">
                                    <option value="">Select</option>
                                    @foreach (var r in Regions)
                                    {
                                        <option value="@r.RegCode">@r.RegDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Province<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.ProvincialProvince">
                                    <option value="">Select</option>
                                    @foreach (var p in FilteredProvincesPermanent)
                                    {
                                        <option value="@p.provCode">@p.provDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>City/Municipality<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.ProvincialMunicipalityCity">
                                    <option value="">Select</option>
                                    @foreach (var c in FilteredCitiesPermanent)
                                    {
                                        <option value="@c.citymunCode">@c.citymunDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Barangay<span class="text-danger">*</span></label>
                                <select class="nsrp-input" @bind="applicant.ApplicantInformation.ProvincialBarangay">
                                    <option value="">Select</option>
                                    @foreach (var b in FilteredBarangaysPermanent)
                                    {
                                        <option value="@b.brgyCode">@b.brgyDesc</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label>Street</label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.ProvincialHouseNoOrStreetVillage" />
                            </div>
                        </div>

                        <h4>Other Information</h4>
                        <div class="nsrp-grid">
                            <!-- ===== Other Info ===== -->
                            <div class="form-group">
                                <label>Disability</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.Disability" />
                            </div>

                            <div class="form-group">
                                <label>Employment Status<span class="text-danger">*</span></label>
                                <select class="nsrp-input"
                                        @bind="applicant.ApplicantInformation.EmpStatus">
                                    <option value="">Select</option>
                                    <option value="Employed">Employed</option>
                                    <option value="Unemployed">Unemployed</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label></label>

                                <select class="nsrp-input"
                                        @bind="applicant.ApplicantInformation.EmpStatusChild">
                                    <option value="Wage Employed">Wage Employed</option>
                                    <option value="Self Employed">Self Employed</option>
                                    <option value="New Entrant / Fresh Graduate">New Entrant / Fresh Graduate</option>
                                    <option value="Finished Contract">Finished Contract</option>
                                    <option value="Resigned">Resigned</option>
                                    <option value="Retired">Retired</option>
                                    <option value="Terminated / Laidoff(local)">Terminated / Laidoff(local)</option>
                                    <option value="Terminated / Laidoff(abroad)">Terminated / Laidoff(abroad)</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Height</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.Height" />
                            </div>

                            <div class="form-group">
                                <label>Cellphone Number<span class="text-danger">*</span></label>
                                <div class="nsrp-phone">
                                    <span class="nsrp-phone-prefix">+63</span>
                                    <input type="text"
                                           class="nsrp-input"
                                           maxlength="10"
                                           inputmode="numeric"
                                           pattern="[0-9]*"
                                           @bind="applicant.ApplicantInformation.CellphoneNumber"
                                           @oninput="ValidateCellphoneInput" />
                                </div>
                            </div>


                            <div class="form-group">
                                <label>Landline Number</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.LandlineNumber" />
                            </div>
                            <div class="form-group">
                                <label>Are you actively looking for work?</label>
                                <select class="nsrp-input"
                                        @bind="applicant.ApplicantInformation.ActivelyLookingForWork">
                                    <option value="">Select</option>
                                    <option value="1">Yes</option>
                                    <option value="0">No</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label>Willing to work immediately?</label>
                                <select class="nsrp-input"
                                        @bind="applicant.ApplicantInformation.WillingToWorkNow">
                                    <option value="">Select</option>
                                    <option value="Yes">Yes</option>
                                    <option value="No">No</option>
                                </select>
                            </div>
                        </div>
                        <h4>Government Mandate</h4>
                        <div class="nsrp-grid">
                            <div class="form-group">
                                <label>TIN</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.TIN" />
                            </div>

                            <div class="form-group">
                                <label>GSIS/SSS Number</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.GSISORSSS" />
                            </div>

                            <div class="form-group">
                                <label>Philhealth Number</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.PHILHEALTH" />
                            </div>

                            <div class="form-group">
                                <label>PAGIBIG Number</label>
                                <input class="nsrp-input"
                                       @bind="applicant.ApplicantInformation.PAGIBIG" />
                            </div>
                        </div>

                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-btn" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>
                }
                else if (activeTab == "jobpref")
                {
                    <div class="nsrp-section">
                        <h4>Job Preferences<span class="text-danger">*</span></h4>
                        <div class="nsrp-insection">
                            <!-- ===== Occupations ===== -->
                            <div class="nsrp-subsection">
                                <h5>Preferred Occupations</h5>
                                <div class="nsrp-input-group">
                                    <input class="nsrp-input" placeholder="Enter occupation"
                                           @bind="newOccupationName" />
                                </div>
                                <button type="button" class="nsrp-btn" @onclick="AddOccupation">
                                    Add
                                </button>
                                <table class="nsrp-table">
                                    <thead>
                                        <tr>
                                            <th>Occupation</th>
                                            <th class="text-end">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var occ in applicant.ApplicantJobPrefOccupation.Where(o => o.IsRemoved == 0))
                                        {
                                            <tr>
                                                <td>@occ.OccupationName</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveOccupation(occ))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- ===== Work Locations ===== -->
                            <div class="nsrp-subsection">
                                <h5>Preferred Work Locations<span class="text-danger">*</span></h5>
                                <div class="nsrp-input-group">
                                    <input class="nsrp-input" placeholder="Enter location"
                                           @bind="newWorkLocationName" />
                                    <select class="nsrp-select nsrp-input" @bind="newWorkLocationType">
                                        <option value="Local">Local</option>
                                        <option value="Abroad">Abroad</option>
                                    </select>
                                </div>
                                <button type="button" class="nsrp-btn" @onclick="AddWorkLocation">
                                    Add
                                </button>
                                <table class="nsrp-table">
                                    <thead>
                                        <tr>
                                            <th>Location</th>
                                            <th>Type</th>
                                            <th class="text-end">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (applicant.ApplicantJobPrefWorkLocation != null &&
                                                                        applicant.ApplicantJobPrefWorkLocation.Any(l => l.IsRemoved == 0))
                                        {
                                            @foreach (var loc in applicant.ApplicantJobPrefWorkLocation.Where(l => l.IsRemoved == 0))
                                            {
                                                <tr>
                                                    <td>@loc.WorkLocationName</td>
                                                    <td>@loc.WorkLocationType</td>
                                                    <td class="text-end">
                                                        <button type="button" class="nsrp-btn-remove" @onclick="@(() => RemoveWorkLocation(loc))">
                                                            Remove
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="3" class="text-center text-muted">No work locations added yet.</td>
                                            </tr>
                                        }
                                    </tbody>

                                </table>
                            </div>
                        </div>
                        <h4>Passport Details</h4>
                        <div class="nsrp-grid">
                            <div>
                                <label>Passport Number</label>
                                <input class="nsrp-input" @bind="applicant.ApplicantInformation.PassportNumber" />
                            </div>
                            <div>
                                <label>Passport Expiry Date</label>
                                <input type="date" class="nsrp-input" @bind="PassportExpiry" @bind:format="yyyy-MM-dd" />
                            </div>
                        </div>
                        <h4>Expected Salary (Range)</h4>
                        <div class="nsrp-grid">
                            <div>
                                <label>Amount From</label>
                                <div class="nsrp-phone">
                                    <span class="nsrp-phone-prefix">₱</span>
                                    <input class="nsrp-input sal" @bind="applicant.ApplicantExpectedSalary.From" />
                                </div>
                            </div>
                            <div>
                                <label>Amount To</label>
                                <div class="nsrp-phone">
                                    <span class="nsrp-phone-prefix">₱</span>
                                    <input class="nsrp-input sal" @bind="applicant.ApplicantExpectedSalary.To" />
                                </div>
                            </div>
                        </div>

                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                    ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>


                }
                else if (activeTab == "language")
                {
                    <div class="nsrp-section">
                        <h4>Language Proficiency<span class="text-danger">*</span></h4>

                        <!-- Add New Language -->
                        <div class="nsrp-input-group">
                            <input class="nsrp-input" placeholder="Enter language"
                                   @bind="newLanguageName" />

                            <label><input type="checkbox" @bind="newRead" /> Read</label>
                            <label><input type="checkbox" @bind="newWrite" /> Write</label>
                            <label><input type="checkbox" @bind="newSpeak" /> Speak</label>
                            <label><input type="checkbox" @bind="newUnderstand" /> Understand</label>

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddLanguage">
                                Add
                            </button>
                        </div>

                        <!-- Language Table -->
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>Language</th>
                                        <th>Read</th>
                                        <th>Write</th>
                                        <th>Speak</th>
                                        <th>Understand</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantLanguageDialectProf != null && applicant.ApplicantLanguageDialectProf.Any())
                                    {
                                        @foreach (var lang in applicant.ApplicantLanguageDialectProf)
                                        {
                                            <tr>
                                                <td>@lang.LanguageName</td>
                                                <td><input type="checkbox" checked="@(@lang.Read == 1)" disabled /></td>
                                                <td><input type="checkbox" checked="@(@lang.Write == 1)" disabled /></td>
                                                <td><input type="checkbox" checked="@(@lang.Speak == 1)" disabled /></td>
                                                <td><input type="checkbox" checked="@(@lang.Understand == 1)" disabled /></td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveLanguage(lang))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center text-muted">No language or dialect added yet.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>
                }
                else if (activeTab == "education")
                {
                    <div class="nsrp-section">
                        <h4>Educational Background<span class="text-danger">*</span></h4>

                        <!-- Add New Education -->
                        <div class="nsrp-input-group">
                            <select class="nsrp-input" @bind="newLevelName">
                                <option value="">-- Select Level --</option>
                                <option>Elementary</option>
                                <option>Secondary</option>
                                <option>Tertiary</option>
                                <option>Graduate Studies</option>
                                <option>Others</option>
                            </select>

                            <input class="nsrp-input" placeholder="School"
                                   @bind="newSchool" />

                            <input class="nsrp-input" placeholder="Course (if any)"
                                   @bind="newCourse" />

                            <input class="nsrp-input" type="number" placeholder="Year Graduated"
                                   @bind="newYearGraduated" />

                            <input class="nsrp-input" placeholder="Awards Received"
                                   @bind="newAwards" />

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddEducation">
                                Add
                            </button>
                        </div>

                        <!-- Education Table -->
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>Level</th>
                                        <th>School</th>
                                        <th>Course</th>
                                        <th>Year Graduated</th>
                                        <th>Awards</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantEducationalBackground != null && applicant.ApplicantEducationalBackground.Any())
                                    {
                                        @foreach (var edu in applicant.ApplicantEducationalBackground
                                                                    .OrderBy(e => levelOrder.IndexOf(e.LevelName ?? "Others")))
                                        {
                                            <tr>
                                                <td>@edu.LevelName</td>
                                                <td>@edu.School</td>
                                                <td>@edu.Course</td>
                                                <td>@edu.YearGraduated</td>
                                                <td>@edu.AwardsReceived</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveEducation(edu))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center text-muted">
                                                No educational background added yet.
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>
                }
                else if (activeTab == "technical")
                {
                    <div class="nsrp-section">
                        <h4>Technical / Vocational</h4>

                        <!-- Add New Technical/Vocational Training -->
                        <div class="nsrp-input-group">
                            <input class="nsrp-input" placeholder="Course Name"
                                   @bind="newCourseName" />

                            <input class="nsrp-input" type="date"
                                   @bind="newDurationFrom" />

                            <input class="nsrp-input" type="date"
                                   @bind="newDurationTo" />

                            <input class="nsrp-input" placeholder="Training Institution"
                                   @bind="newInstitution" />

                            <input class="nsrp-input" placeholder="Certificate Received"
                                   @bind="newCertificate" />

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddTechnical">
                                Add
                            </button>
                        </div>

                        <!-- Technical / Vocational Table -->
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>Course Name</th>
                                        <th>Duration (From - To)</th>
                                        <th>Training Institution</th>
                                        <th>Certificate Received</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantTechnicalVocational != null && applicant.ApplicantTechnicalVocational.Any())
                                    {
                                        @foreach (var tech in applicant.ApplicantTechnicalVocational)
                                        {
                                            <tr>
                                                <td>@tech.CourseName</td>
                                                <td>
                                                    @{
                                                        var fromStr = tech.DurationFrom?.ToString("yyyy-MM-dd") ?? "";
                                                        var toStr = tech.DurationTo?.ToString("yyyy-MM-dd") ?? "";
                                                    }
                                                    @(fromStr) - @(toStr)
                                                </td>
                                                <td>@tech.TrainingInstitution</td>
                                                <td>@tech.CertifcateReceived</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveTechnical(tech))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center text-muted">
                                                No technical or vocational course added yet.
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>
                }
                else if (activeTab == "eligibility")
                {
                    <div class="nsrp-section">
                        <h4>Eligibility</h4>

                        <!-- Add New Eligibility -->
                        <div class="nsrp-input-group">
                            <input class="nsrp-input" placeholder="Eligibility Name"
                                   @bind="newEligibilityName" />

                            <input class="nsrp-input" type="number" placeholder="Rating"
                                   @bind="newEligibilityRating" />

                            <input class="nsrp-input" type="date"
                                   @bind="newEligibilityDateExam" />

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddEligibility">
                                Add
                            </button>
                        </div>
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>Eligibility Name</th>
                                        <th>Rating</th>
                                        <th>Date of Examination</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantEligibility != null && applicant.ApplicantEligibility.Any())
                                    {
                                        @foreach (var e in applicant.ApplicantEligibility)
                                        {
                                            <tr>
                                                <td>@e.EligibilityName</td>
                                                <td>@($"{e.Rating}%")</td>
                                                <td>@e.DateOfExamination?.ToString("yyyy-MM-dd")</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveEligibility(e))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center text-muted">
                                                No eligibility records added yet.
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                        <h4>Professional License</h4>

                        <!-- Add New Professional License -->
                        <div class="nsrp-input-group">
                            <input class="nsrp-input" placeholder="License Name"
                                   @bind="newProfName" />

                            <input class="nsrp-input" type="date"
                                   @bind="newProfValidity" />

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddProfessionalLicense">
                                Add
                            </button>
                        </div>
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>License Name</th>
                                        <th>Validity</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantProfessionalLicense != null && applicant.ApplicantProfessionalLicense.Any())
                                    {
                                        @foreach (var p in applicant.ApplicantProfessionalLicense)
                                        {
                                            <tr>
                                                <td>@p.ProfName</td>
                                                <td>@p.Validity?.ToString("yyyy-MM-dd")</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveProfessionalLicense(p))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="3" class="text-center text-muted">
                                                No professional licenses added yet.
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>
                }
                else if (activeTab == "Work")
                {
                    <div class="nsrp-section">
                        <h4>Work Experience</h4>

                        <!-- Add New Work Experience -->
                        <div class="nsrp-input-group">
                            <input class="nsrp-input" placeholder="Company Name"
                                   @bind="newCompanyName" />

                            <input class="nsrp-input" placeholder="Company Address"
                                   @bind="newCompanyAddress" />

                            <input class="nsrp-input" placeholder="Position"
                                   @bind="newPosition" />

                            <input class="nsrp-input" type="date"
                                   @bind="newInclusiveDateFrom" />

                            <input class="nsrp-input" type="date"
                                   @bind="newInclusiveDateTo" />

                            <select class="nsrp-input" @bind="newStatus">
                                <option value="Permanent">Permanent</option>
                                <option value="Contractual">Contractual</option>
                                <option value="Probationary">Probationary</option>
                                <option value="Part-Time">Part-Time</option>
                                <option value="Others">Others</option>
                            </select>

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddWorkExperience">
                                Add
                            </button>
                        </div>

                        <!-- Work Experience Table -->
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>Company Name</th>
                                        <th>Address</th>
                                        <th>Position</th>
                                        <th>Inclusive Dates</th>
                                        <th>Status</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantWorkExperience != null && applicant.ApplicantWorkExperience.Any())
                                    {
                                        @foreach (var work in applicant.ApplicantWorkExperience)
                                        {
                                            <tr>
                                                <td>@work.CompanyName</td>
                                                <td>@work.CompanyAddress</td>
                                                <td>@work.Position</td>
                                                <td>
                                                    @work.InclusiveDateFrom?.ToString("yyyy-MM-dd")
                                                    -
                                                    @work.InclusiveDateTo?.ToString("yyyy-MM-dd")
                                                </td>
                                                <td>@work.Status</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveWorkExperience(work))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center text-muted">
                                                No work experience added yet.
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync">
                                Next →
                            </button>
                        </div>
                    </div>
                }
                else if (activeTab == "Other")
                {
                    <div class="nsrp-section">
                        <h4>Other Skills<span class="text-danger">*</span></h4>

                        <!-- Add New Skill -->
                        <div class="nsrp-input-group">
                            <input class="nsrp-input" placeholder="Enter skill"
                                   @bind="newSkillName" list="skillOptions" />

                            <datalist id="skillOptions">
                                <option value="Driving" />
                                <option value="Cooking" />
                                <option value="Baking" />
                                <option value="Carpentry" />
                                <option value="Masonry" />
                                <option value="Plumbing" />
                                <option value="Electrician" />
                                <option value="Sewing / Tailoring" />
                                <option value="Beautician" />
                                <option value="Hairdressing / Barber" />
                                <option value="Painting / Artist" />
                                <option value="Embroidery" />
                                <option value="Computer Repair / IT Support" />
                                <option value="Gardening / Landscaping" />
                                <option value="Welding" />
                                <option value="Housekeeping" />
                            </datalist>

                            <button type="button" class="nsrp-btn"
                                    @onclick="AddOtherSkill">
                                Add
                            </button>
                        </div>

                        <!-- Other Skills Table -->
                        <div class="table-scroll">
                            <table class="nsrp-table">
                                <thead>
                                    <tr>
                                        <th>Skill Name</th>
                                        <th class="text-end">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applicant.ApplicantOtherSkills != null && applicant.ApplicantOtherSkills.Any())
                                    {
                                        @foreach (var skill in applicant.ApplicantOtherSkills)
                                        {
                                            <tr>
                                                <td>@skill.SkillName</td>
                                                <td class="text-end">
                                                    <button type="button" class="nsrp-btn-remove"
                                                            @onclick="@(() => RemoveOtherSkill(skill))">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="2" class="text-center text-muted">
                                                No skills added yet.
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="nsrp-toggle" @onclick="PreviousTabAsync">
                                ← Back
                            </button>
                            <button type="button" class="nsrp-toggle" @onclick="NextTabAsync" disabled="@isSubmitting">
                                @(isSubmitting ? "Submitting..." : "Submit")
                            </button>
                        </div>
                    </div>
                }

            </div>
            @if (_errors.Count > 0)
            {
                <div class="alert alert-danger mt-2">
                    <ul>
                        @foreach (var err in _errors)
                        {
                            <li>@err</li>
                        }
                    </ul>
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(messageType == "success" ? "alert-success" : "alert-danger")" role="alert">
                    @message
                </div>
            }
            @if (showSuccessModal)
            {
                <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content rounded-3 shadow-lg">
                            <div class="modal-header bg-success text-white">
                                <h5 class="modal-title">✅ Registration Successful</h5>
                            </div>
                            <div class="modal-body text-center">
                                 <p>Please check your Email for account credentials.</p>
                            </div>
                            <div class="modal-footer">
                                <button class="nsrp-toggle" @onclick="CloseModal">OK</button>
                            </div>
                        </div>
                    </div>
                </div>
            }


        </EditForm>
    }

</div>

@code {
    private bool isUserLoggedIn = false;
    private ApplicantDataViewModel applicant = new();
    private bool isEditing = false;
    private bool loaded = false;

    private List<Region> Regions = new();
    private List<Province> AllProvinces = new();
    private List<CityMunicipality> AllCities = new();
    private List<Barangay> AllBarangays = new();

    private string? accountId;

    // Filtering Present Address
    private IEnumerable<Province> FilteredProvincesPresent =>
        AllProvinces.Where(p => p.regCode == applicant.ApplicantInformation.PresentRegion);

    private IEnumerable<CityMunicipality> FilteredCitiesPresent =>
        AllCities.Where(c => c.provCode == applicant.ApplicantInformation.PresentProvince);

    private IEnumerable<Barangay> FilteredBarangaysPresent =>
        AllBarangays.Where(b => b.citymunCode == applicant.ApplicantInformation.PresentMunicipalityCity);

    // Filtering Permanent Address
    private IEnumerable<Province> FilteredProvincesPermanent =>
        AllProvinces.Where(p => p.regCode == applicant.ApplicantInformation.ProvincialRegion);

    private IEnumerable<CityMunicipality> FilteredCitiesPermanent =>
        AllCities.Where(c => c.provCode == applicant.ApplicantInformation.ProvincialProvince);

    private IEnumerable<Barangay> FilteredBarangaysPermanent =>
        AllBarangays.Where(b => b.citymunCode == applicant.ApplicantInformation.ProvincialMunicipalityCity);


    // Ensure everything is initialized
    protected override void OnInitialized()
    {
        applicant = new ApplicantDataViewModel
        {
            ApplicantInformation = new ApplicantInformation(),
            ApplicantExpectedSalary = new ApplicantExpectedSalary
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant?.ApplicantInformation?.AccountId ?? string.Empty,
                From = 0,
                To = 0,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            },
            ApplicantJobPrefOccupation = new List<ApplicantJobPrefOccupation>(),
            ApplicantJobPrefWorkLocation = new List<ApplicantJobPrefWorkLocation>(),
            ApplicantLanguageDialectProf = new List<ApplicantLanguageDialectProf>(),
            ApplicantEducationalBackground = new List<ApplicantEducationalBackground>(),
            ApplicantEligibility = new List<ApplicantEligibility>(),
            ApplicantOtherSkills = new List<ApplicantOtherSkills>(),
            ApplicantProfessionalLicense = new List<ApplicantProfessionalLicense>(),
            ApplicantTechnicalVocational = new List<ApplicantTechnicalVocational>(),
            ApplicantWorkExperience = new List<ApplicantWorkExperience>()
        };
    }


    private bool showSuccessModal = false;
    private string jobFairReferenceCode = string.Empty;
    private List<string> _errors = new();
    private bool isSubmitting = false;
    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return; // Prevent double submission
        isSubmitting = true;
        _errors.Clear();

        try
        {
            // =========================
            // 🧩 FRONTEND VALIDATION
            // =========================
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.Email))
                _errors.Add("Email is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.CellphoneNumber))
                _errors.Add("Phone number is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.FirstName))
                _errors.Add("First name is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.SurName))
                _errors.Add("Last name is required.");
            if (applicant.ApplicantInformation.DateOfBirth == default)
                _errors.Add("Date of birth is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.PlaceOfBirth))
                _errors.Add("Place of birth is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.Gender))
                _errors.Add("Gender is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.CivilStatus))
                _errors.Add("Civil status is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.PresentProvince))
                _errors.Add("Present province is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.PresentMunicipalityCity))
                _errors.Add("Present city/municipality is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.PresentBarangay))
                _errors.Add("Present barangay is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.ProvincialProvince))
                _errors.Add("Permanent province is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.ProvincialMunicipalityCity))
                _errors.Add("Permanent city/municipality is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.ProvincialBarangay))
                _errors.Add("Permanent barangay is required.");
            if (string.IsNullOrEmpty(applicant.ApplicantInformation.EmpStatus))
                _errors.Add("Employment status is required.");

            // Stop if any validation error
            if (_errors.Count > 0)
            {
                var allErrors = string.Join("\n", _errors);
                await JS.InvokeVoidAsync("alert", $"Please fix the following:\n\n{allErrors}");
                return;
            }

            // =========================
            // 🧹 CLEANUP EMPTY LISTS
            // =========================
            applicant.ApplicantEducationalBackground = applicant.ApplicantEducationalBackground?
                .Where(x => !string.IsNullOrWhiteSpace(x.LevelName) || !string.IsNullOrWhiteSpace(x.School) || !string.IsNullOrWhiteSpace(x.Course))
                .ToList() ?? new();

            applicant.ApplicantEligibility = applicant.ApplicantEligibility?
                .Where(x => !string.IsNullOrWhiteSpace(x.EligibilityName) || x.Rating > 0)
                .ToList() ?? new();

            applicant.ApplicantOtherSkills = applicant.ApplicantOtherSkills?
                .Where(x => !string.IsNullOrWhiteSpace(x.SkillName))
                .ToList() ?? new();

            applicant.ApplicantLanguageDialectProf = applicant.ApplicantLanguageDialectProf?
                .Where(x => !string.IsNullOrWhiteSpace(x.LanguageName))
                .ToList() ?? new();

            applicant.ApplicantTechnicalVocational = applicant.ApplicantTechnicalVocational?
                .Where(x => !string.IsNullOrWhiteSpace(x.CourseName))
                .ToList() ?? new();

            applicant.ApplicantProfessionalLicense = applicant.ApplicantProfessionalLicense?
                .Where(x => !string.IsNullOrWhiteSpace(x.ProfName))
                .ToList() ?? new();

            applicant.ApplicantJobPrefOccupation = applicant.ApplicantJobPrefOccupation?
                .Where(x => !string.IsNullOrWhiteSpace(x.OccupationName))
                .ToList() ?? new();

            applicant.ApplicantJobPrefWorkLocation = applicant.ApplicantJobPrefWorkLocation?
                .Where(x => !string.IsNullOrWhiteSpace(x.WorkLocationName))
                .ToList() ?? new();

            applicant.ApplicantWorkExperience = applicant.ApplicantWorkExperience?
                .Where(x => !string.IsNullOrWhiteSpace(x.CompanyName) || !string.IsNullOrWhiteSpace(x.Position))
                .ToList() ?? new();

            // =========================
            // 🚀 SUBMIT TO API
            // =========================
            var response = await Http.PostAsJsonAsync("api/Applicant/SaveNSRP", applicant);

            if (response.IsSuccessStatusCode)
            {   
                var applicantId = (await response.Content.ReadAsStringAsync()).Trim();

                if (string.IsNullOrWhiteSpace(applicantId))
                {
                    await JS.InvokeVoidAsync("alert", "Failed to retrieve applicant ID from server.");
                    return;
                }

                // =========================
                // ✉️ SEND EMAIL VERIFICATION
                // =========================
                if (!string.IsNullOrEmpty(applicant?.ApplicantInformation?.Email))
                {
                    var mail = new
                    {
                        mailTo = applicant.ApplicantInformation.Email,
                        baseUri = string.Empty
                    };

                    var sendEmailResponse = await Http.PostAsJsonAsync("api/Applicant/SendEmailVerified", mail);

                    // ✅ Always show popup after success (no alert)
                    if (sendEmailResponse.IsSuccessStatusCode)
                    {
                        showSuccessModal = true;

                        // Clear validation state so no alerts appear after close
                        _errors.Clear();
                        applicant = new();
                    }
                    else
                    {
                        var errorMsg = await sendEmailResponse.Content.ReadAsStringAsync();
                        await JS.InvokeVoidAsync("alert", $"Registration succeeded, but sending email failed.\n\nServer says:\n{errorMsg}");
                    }
                }
                else    
                {
                    await JS.InvokeVoidAsync("alert", "Registration succeeded, but email not found — skipping email send.");
                }
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                if (errorMsg.Contains("already registered", StringComparison.OrdinalIgnoreCase))
                {
                    await JS.InvokeVoidAsync("alert", "Email is already registered. Please use a different email.");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Failed to register applicant.\n\n{errorMsg}");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An unexpected error occurred:\n{ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void CloseModal()
    {
        showSuccessModal = false;

        // ✅ Temporarily disable form submission logic
        isSubmitting = true;

        // ✅ Clear any validation errors
        _errors.Clear();

        // ✅ Reset the form model
        applicant = new();

        // ✅ Small delay to allow UI to rerender cleanly before re-enabling submit
        _ = Task.Run(async () =>
        {
            await Task.Delay(200);
            isSubmitting = false;
        });

        // ✅ Navigate silently
        Navigation.NavigateTo("/pesobeta", forceLoad: false);
    }



    // Converts between long timestamp <-> DateTime for binding
    private DateTime? DateOfBirthValue
    {
        get
        {
            if (applicant?.ApplicantInformation == null || applicant.ApplicantInformation.DateOfBirth == 0)
                return null;

            return DateTimeOffset.FromUnixTimeMilliseconds(applicant.ApplicantInformation.DateOfBirth).DateTime;
        }
        set
        {
            if (applicant?.ApplicantInformation == null) return;

            applicant.ApplicantInformation.DateOfBirth =
                value.HasValue
                    ? new DateTimeOffset(value.Value).ToUnixTimeMilliseconds()
                    : 0;
        }
    }

    private DateTime? DateOfBirthValueModal
    {
        get
        {
            if (applicant?.ApplicantInformation == null || applicant.ApplicantInformation.DateOfBirth == 0)
                return null;

            return DateTimeOffset.FromUnixTimeMilliseconds(applicant.ApplicantInformation.DateOfBirth).DateTime;
        }
    }

    // Fix for CS1503: Argument 1: cannot convert from 'long?' to 'long'
    // Update the PassportExpiry property to handle long? correctly

    private DateTime? PassportExpiry
    {
        get
        {
            // Use GetValueOrDefault to ensure a long value is passed
            if (applicant.ApplicantInformation.PassportExpiryDate == null || applicant.ApplicantInformation.PassportExpiryDate == 0)
                return null;

            return DateTimeOffset.FromUnixTimeMilliseconds(applicant.ApplicantInformation.PassportExpiryDate.GetValueOrDefault()).DateTime;
        }
        set
        {
            if (value.HasValue)
            {
                applicant.ApplicantInformation.PassportExpiryDate =
                    new DateTimeOffset(value.Value).ToUnixTimeMilliseconds();
            }
            else
            {
                applicant.ApplicantInformation.PassportExpiryDate = 0;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            Regions = await AddressService.GetRegionsAsync();
            AllProvinces = await AddressService.GetProvincesAsync();
            AllCities = await AddressService.GetCitiesAsync();
            AllBarangays = await AddressService.GetBarangaysAsync();
        }
    }
    [JSInvokable]
    public void UpdateDateOfBirth(string date)
    {
        if (!string.IsNullOrWhiteSpace(date))
        {
            if (DateTime.TryParse(date, out var parsedDate))
            {
                DateOfBirthValue = parsedDate;
            }
        }
        else
        {
            DateOfBirthValue = null; // or DateTime.MinValue if your property is non-nullable
        }

        InvokeAsync(StateHasChanged); // ✅ Refresh UI safely
    }

    // ********************************************************************** Add Expected Salary **********************************************************************
    private void AddExpectedSalary()
    {
        applicant.ApplicantExpectedSalary ??= new ApplicantExpectedSalary();

        applicant.ApplicantExpectedSalary.Id = Guid.NewGuid().ToString();
        applicant.ApplicantExpectedSalary.AccountId = applicant.ApplicantInformation?.AccountId ?? string.Empty;
        applicant.ApplicantExpectedSalary.DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
    }

    // ********************************************************************** Add Occupation **********************************************************************

    private string newOccupationName = string.Empty;
    private string newWorkLocationName = string.Empty;
    private string newWorkLocationType = "Local";

    private void AddOccupation()
    {
        if (!string.IsNullOrWhiteSpace(newOccupationName))
        {
            // ✅ Ensure the list exists
            applicant.ApplicantJobPrefOccupation ??= new List<ApplicantJobPrefOccupation>();

            applicant.ApplicantJobPrefOccupation.Add(new ApplicantJobPrefOccupation
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation?.AccountId ?? string.Empty,
                OccupationName = newOccupationName,
                IsRemoved = 0
            });

            newOccupationName = string.Empty;
        }
    }

    private void RemoveOccupation(ApplicantJobPrefOccupation occ)
    {
        occ.IsRemoved = 1;
    }

    // ********************************************************************** Add Work Location **********************************************************************

    private void AddWorkLocation()
    {
        if (!string.IsNullOrWhiteSpace(newWorkLocationName))
        {
            // ✅ Ensure the list exists
            applicant.ApplicantJobPrefWorkLocation ??= new List<ApplicantJobPrefWorkLocation>();

            applicant.ApplicantJobPrefWorkLocation.Add(new ApplicantJobPrefWorkLocation
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation?.AccountId ?? string.Empty,
                WorkLocationName = newWorkLocationName,
                WorkLocationType = newWorkLocationType,
                IsRemoved = 0
            });

            newWorkLocationName = string.Empty;
            newWorkLocationType = "Local"; // reset to default
        }
    }

    private void RemoveWorkLocation(ApplicantJobPrefWorkLocation loc)
    {
        loc.IsRemoved = 1;
    }


    // ********************************************************************** Add Language **********************************************************************
    private string newLanguageName = string.Empty;
    private bool newRead, newWrite, newSpeak, newUnderstand;

    private void AddLanguage()
    {
        if (!string.IsNullOrWhiteSpace(newLanguageName))
        {
            applicant.ApplicantLanguageDialectProf.Add(new ApplicantLanguageDialectProf
            {
                Id = Guid.NewGuid().ToString(), // Fix: convert Guid to string
                AccountId = applicant.ApplicantInformation.AccountId, // Fix: get AccountId from ApplicantInformation
                LanguageName = newLanguageName,
                Read = newRead ? 1 : 0,
                Write = newWrite ? 1 : 0,
                Speak = newSpeak ? 1 : 0,
                Understand = newUnderstand ? 1 : 0,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // reset inputs
            newLanguageName = string.Empty;
            newRead = newWrite = newSpeak = newUnderstand = false;
        }
    }

    private void RemoveLanguage(ApplicantLanguageDialectProf lang)
    {
        applicant.ApplicantLanguageDialectProf.Remove(lang);
    }

    // ********************************************************************** Add Educational Background **********************************************************************
    private string newLevelName = string.Empty;
    private string newSchool = string.Empty;
    private string? newCourse = string.Empty;
    private int? newYearGraduated;
    private string? newAwards = string.Empty;

    // Fixed order of levels
    private readonly List<string> levelOrder = new()
    {
        "Elementary",
        "Secondary",
        "Tertiary",
        "Graduate Studies",
        "Others"
    };

    private void AddEducation()
    {
        if (!string.IsNullOrWhiteSpace(newLevelName) && !string.IsNullOrWhiteSpace(newSchool))
        {
            applicant.ApplicantEducationalBackground.Add(new ApplicantEducationalBackground
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation.AccountId,
                LevelName = newLevelName,
                School = newSchool,
                Course = string.IsNullOrWhiteSpace(newCourse) ? null : newCourse,
                YearGraduated = newYearGraduated,
                AwardsReceived = string.IsNullOrWhiteSpace(newAwards) ? null : newAwards,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // reset inputs
            newLevelName = string.Empty;
            newSchool = string.Empty;
            newCourse = string.Empty;
            newYearGraduated = null;
            newAwards = string.Empty;
        }
    }

    private void RemoveEducation(ApplicantEducationalBackground edu)
    {
        applicant.ApplicantEducationalBackground.Remove(edu);
    }


    // Add Technical/Vocational
    private string newCourseName = string.Empty;
    private DateTime? newDurationFrom;
    private DateTime? newDurationTo;
    private string newInstitution = string.Empty;
    private string newCertificate = string.Empty;

    private void AddTechnical()
    {
        if (!string.IsNullOrWhiteSpace(newCourseName) &&
            !string.IsNullOrWhiteSpace(newInstitution) &&
            newDurationFrom.HasValue &&
            newDurationTo.HasValue)
        {
            applicant.ApplicantTechnicalVocational.Add(new ApplicantTechnicalVocational
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation.AccountId,
                CourseName = newCourseName,
                DurationFrom = newDurationFrom,
                DurationTo = newDurationTo,
                TrainingInstitution = newInstitution,
                CertifcateReceived = string.IsNullOrWhiteSpace(newCertificate) ? null : newCertificate,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // Reset inputs
            newCourseName = string.Empty;
            newDurationFrom = null;
            newDurationTo = null;
            newInstitution = string.Empty;
            newCertificate = string.Empty;
        }
        else
        {
            // optional: show message to user
            JS.InvokeVoidAsync("alert", "Please fill in all required fields (Course, Institution, Duration From, Duration To).");
        }
    }


    private void RemoveTechnical(ApplicantTechnicalVocational tech)
    {
        applicant.ApplicantTechnicalVocational.Remove(tech);
    }


    // ********************************************************************** Add Eligibility **********************************************************************
    private string newEligibilityName = string.Empty;
    private int? newEligibilityRating;
    private DateTime? newEligibilityDateExam;

    private void AddEligibility()
    {
        if (!string.IsNullOrWhiteSpace(newEligibilityName))
        {
            applicant.ApplicantEligibility.Add(new ApplicantEligibility
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation.AccountId,
                EligibilityName = newEligibilityName,
                Rating = newEligibilityRating ?? 0,
                DateOfExamination = newEligibilityDateExam,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // Reset inputs
            newEligibilityName = string.Empty;
            newEligibilityRating = null;
            newEligibilityDateExam = null;
        }
    }

    private void RemoveEligibility(ApplicantEligibility e)
    {
        applicant.ApplicantEligibility.Remove(e);
    }

    // Professional License inputs
    private string newProfName = string.Empty;
    private DateTime? newProfValidity;

    private void AddProfessionalLicense()
    {
        if (!string.IsNullOrWhiteSpace(newProfName))
        {
            applicant.ApplicantProfessionalLicense.Add(new ApplicantProfessionalLicense
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation.AccountId,
                ProfName = newProfName,
                Validity = newProfValidity,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // Reset inputs
            newProfName = string.Empty;
            newProfValidity = null;
        }
    }

    private void RemoveProfessionalLicense(ApplicantProfessionalLicense p)
    {
        applicant.ApplicantProfessionalLicense.Remove(p);
    }
    // ********************************************************************** Add Work Experience **********************************************************************

    private string newCompanyName = string.Empty;
    private string newCompanyAddress = string.Empty;
    private string newPosition = string.Empty;
    private DateTime? newInclusiveDateFrom;
    private DateTime? newInclusiveDateTo;
    private string newStatus = "Permanent";

    private void AddWorkExperience()
    {
        if (!string.IsNullOrWhiteSpace(newCompanyName) &&
            !string.IsNullOrWhiteSpace(newPosition))
        {
            applicant.ApplicantWorkExperience.Add(new ApplicantWorkExperience
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation.AccountId,
                CompanyName = newCompanyName,
                CompanyAddress = newCompanyAddress,
                Position = newPosition,
                InclusiveDateFrom = newInclusiveDateFrom,
                InclusiveDateTo = newInclusiveDateTo,
                Status = newStatus,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // Reset inputs
            newCompanyName = string.Empty;
            newCompanyAddress = string.Empty;
            newPosition = string.Empty;
            newInclusiveDateFrom = null;
            newInclusiveDateTo = null;
            newStatus = "Permanent";
        }
    }
    private void RemoveWorkExperience(ApplicantWorkExperience work)
    {
        applicant.ApplicantWorkExperience.Remove(work);
    }
    // ********************************************************************** Add Other Skills **********************************************************************

    private string newSkillName = string.Empty;

    private void AddOtherSkill()
    {
        if (!string.IsNullOrWhiteSpace(newSkillName))
        {
            applicant.ApplicantOtherSkills.Add(new ApplicantOtherSkills
            {
                Id = Guid.NewGuid().ToString(),
                AccountId = applicant.ApplicantInformation.AccountId,
                SkillName = newSkillName,
                DateLastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });

            // Reset input
            newSkillName = string.Empty;
        }
    }

    private void RemoveOtherSkill(ApplicantOtherSkills skill)
    {
        applicant.ApplicantOtherSkills.Remove(skill);
    }

    // ********************************************************************** Show NSRP **********************************************************************

    private bool showNSRPForm = false;

    private void ShowNSRPForm()
    {
        showNSRPForm = true;
    }

    private void CloseNSRPForm()
    {
        showNSRPForm = false;
    }

    private async Task PrintNSRPForm()
    {
        await JS.InvokeVoidAsync("printDiv", "nsrpFormContent");
    }

    // ********************************************************************** Tabs **********************************************************************

    // ElementReferences for each tab button
    private ElementReference btnPersonal;
    private ElementReference btnJobpref;
    private ElementReference btnLanguage;
    private ElementReference btnEducation;
    private ElementReference btnTechnical;
    private ElementReference btnEligibility;
    private ElementReference btnWork;
    private ElementReference btnOther;

    private string activeTab = "personal";

    private void ChangeTab(string tab)
    {
        activeTab = tab;
    }

    // helper: call ChangeTab and then center the clicked button via JS interop
    private async Task SelectAndCenter(string tab, ElementReference btn)
    {
        ChangeTab(tab);

        // let Blazor update DOM (small delay to ensure layout finishes)
        await InvokeAsync(StateHasChanged);
        await Task.Delay(40);

        // call JS to center the button
        await JS.InvokeVoidAsync("centerTab", btn);
    }


    private bool Consent1, Consent2, Consent3;
    private bool showRegistrationForm = false;
    private bool AllConsentsChecked => Consent1 && Consent2 && Consent3;

    private bool showConsentSection = true;
    private void Cancel()
    {
        Consent1 = Consent2 = Consent3 = false;
        showConsentSection = true;
        showRegistrationForm = false;
        Navigation.NavigateTo("/pesobeta/", false);
    }

    private async Task Next()
    {
        if (AllConsentsChecked)
        {
            showConsentSection = false;       // 👈 Hide consent section
            showRegistrationForm = true;      // 👈 Show registration form

            // Wait a moment to let the registration form render before initializing flatpickr
            await Task.Delay(100);

        }
    }

    // ********************************************************************** Tab Next/Prev **********************************************************************


    private async Task NextTabAsync()
    {
        _errors.Clear();

        if (!ValidateCurrentTab())
            return;

        // Move to the next logical tab
        switch (activeTab)
        {
            case "personal":
                activeTab = "jobpref";
                await SelectAndCenter("jobpref", btnJobpref);
                break;

            case "jobpref":
                activeTab = "language";
                await SelectAndCenter("language", btnLanguage);
                break;

            case "language":
                activeTab = "education";
                await SelectAndCenter("education", btnEducation);
                break;

            case "education":
                activeTab = "technical";
                await SelectAndCenter("technical", btnTechnical);
                break;

            case "technical":
                activeTab = "eligibility";
                await SelectAndCenter("eligibility", btnEligibility);
                break;

            case "eligibility":
                activeTab = "Work";
                await SelectAndCenter("Work", btnWork);
                break;

            case "Work":
                activeTab = "Other";
                await SelectAndCenter("Other", btnOther);
                break;

            case "Other":
                await HandleValidSubmit(); // ✅ Final submission
                break;
        }
    }

    private async Task PreviousTabAsync()
    {
        switch (activeTab)
        {
            case "jobpref":
                activeTab = "personal";
                await SelectAndCenter("personal", btnPersonal);
                break;
            case "language":
                activeTab = "jobpref";
                await SelectAndCenter("jobpref", btnJobpref);
                break;
            case "education":
                activeTab = "language";
                await SelectAndCenter("language", btnLanguage);
                break;
            case "technical":
                activeTab = "education";
                await SelectAndCenter("education", btnEducation);
                break;
            case "eligibility":
                activeTab = "technical";
                await SelectAndCenter("technical", btnTechnical);
                break;
            case "Work":
                activeTab = "eligibility";
                await SelectAndCenter("eligibility", btnEligibility);
                break;
            case "Other":
                activeTab = "Work";
                await SelectAndCenter("Work", btnWork);
                break;
        }
    }
    private bool ValidateCurrentTab()
    {
        _errors.Clear();

        switch (activeTab)
        {
            case "personal":
                if (string.IsNullOrWhiteSpace(applicant.ApplicantInformation.FirstName))

                    _errors.Add("First Name is required.");
                if (string.IsNullOrWhiteSpace(applicant.ApplicantInformation.SurName))
                    _errors.Add("Last Name is required.");
                if (string.IsNullOrWhiteSpace(applicant.ApplicantInformation.Email))
                    _errors.Add("Email is required.");
                if (string.IsNullOrWhiteSpace(applicant.ApplicantInformation.Gender))
                    _errors.Add("Gender is required.");
                if (string.IsNullOrWhiteSpace(applicant.ApplicantInformation.CivilStatus))
                    _errors.Add("Civil Status is required.");
                break;

            case "jobpref":
                if (applicant.ApplicantJobPrefOccupation == null || !applicant.ApplicantJobPrefOccupation.Any())
                    _errors.Add("Please add at least one preferred occupation.");
                if (applicant.ApplicantJobPrefWorkLocation == null || !applicant.ApplicantJobPrefWorkLocation.Any())
                    _errors.Add("Please add at least one preferred work location.");
                break;

            case "language":
                if (applicant.ApplicantLanguageDialectProf == null || !applicant.ApplicantLanguageDialectProf.Any())
                    _errors.Add("Please add at least one language or dialect.");
                break;

            case "education":
                if (applicant.ApplicantEducationalBackground == null || !applicant.ApplicantEducationalBackground.Any())
                    _errors.Add("Please add at least one educational background.");
                break;

            case "Other":
                if (applicant.ApplicantOtherSkills == null || !applicant.ApplicantOtherSkills.Any())
                    _errors.Add("Please add at least one skill before submitting.");
                break;
        }

        if (_errors.Any())
            return false;

        return true;
    }

    public class ApplicantDataViewModel
    {
        public ApplicantAccount ApplicantAccount { get; set; } = new();
        public List<ApplicantEducationalBackground> ApplicantEducationalBackground { get; set; } = new();
        public List<ApplicantEligibility> ApplicantEligibility { get; set; } = new();
        public ApplicantExpectedSalary ApplicantExpectedSalary { get; set; } = new();
        public ApplicantInformation ApplicantInformation { get; set; } = new();
        public List<ApplicantJobPrefOccupation> ApplicantJobPrefOccupation { get; set; } = new();
        public List<ApplicantJobPrefWorkLocation> ApplicantJobPrefWorkLocation { get; set; } = new();
        public List<ApplicantLanguageDialectProf> ApplicantLanguageDialectProf { get; set; } = new();
        public List<ApplicantOtherSkills> ApplicantOtherSkills { get; set; } = new();
        public List<ApplicantProfessionalLicense> ApplicantProfessionalLicense { get; set; } = new();
        public List<ApplicantTechnicalVocational> ApplicantTechnicalVocational { get; set; } = new();
        public List<ApplicantWorkExperience> ApplicantWorkExperience { get; set; } = new();
    }
    private string? message;
    private string messageType = ""; // "success" or "error"

    // ----------------------------------------- Cellphone number only ----------------

    private void ValidateCellphoneInput(ChangeEventArgs e)
    {
        var value = new string(e.Value?.ToString()?.Where(char.IsDigit).ToArray() ?? []);
        if (value.Length > 10)
            value = value.Substring(0, 10);

        applicant.ApplicantInformation.CellphoneNumber = value;
    }

}

<script>
        function scrollTabs(amount) {
        const tabs = document.querySelector(".nsrp-tabs");
        tabs.scrollBy({ left: amount, behavior: "smooth" });
    }
    // receives an ElementReference from Blazor (becomes the actual DOM element)
    window.centerTab = (el) => {
      const tabs = document.querySelector('.nsrp-tabs');
      if (!tabs || !el) return;

      // ensure we have an HTML element
      const btn = el instanceof HTMLElement ? el : el;

      const tabCenter = btn.offsetLeft + btn.offsetWidth / 2;
      const scrollTo = tabCenter - tabs.offsetWidth / 2;
      tabs.scrollTo({ left: scrollTo, behavior: 'smooth' });
    };
</script>